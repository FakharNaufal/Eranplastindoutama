[2025-10-05 15:57:49] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T08:57:49.095Z"} 
[2025-10-05 15:57:49] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759654668 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz 9QOks4FNXExuxz1ybXzLQB4UJvLoScc58vZRVnJ4 znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz http://eran_plastindo.co.id/dashboard   1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-56496305 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-56496305", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1449728268 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1449728268", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-476171522 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-476171522", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2033807907 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2033807907", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1145941569 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1145941569", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-444274154 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-444274154", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1682050854 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1682050854", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-217794247 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-217794247", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-497985487 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-497985487", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 25.94 mysql  1759654667.4723 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.93 mysql  1759654667.476 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.85 mysql  1759654667.4781 select * from `products` where `products`.`deleted_at` is null limit 4 0.7 mysql  1759654667.48 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.75 mysql  1759654667.4819 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.62 mysql  1759654667.4836 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.74 mysql  1759654667.4854 select * from `users` where `id` = ? limit 1 1.11 mysql 1 1759654668.6129 local null null C:\laragon\www\eran_plastindo null 9c0486c3-6651-4012-a38a-07bf02704703 null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759654668 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz 9QOks4FNXExuxz1ybXzLQB4UJvLoScc58vZRVnJ4 znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz http://eran_plastindo.co.id/dashboard   1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-56496305 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-56496305", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1449728268 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1449728268", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-476171522 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-476171522", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2033807907 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2033807907", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1145941569 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1145941569", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-444274154 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-444274154", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1682050854 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1682050854", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-217794247 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-217794247", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-497985487 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-497985487", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 25.94 mysql  1759654667.4723 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.93 mysql  1759654667.476 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.85 mysql  1759654667.4781 select * from `products` where `products`.`deleted_at` is null limit 4 0.7 mysql  1759654667.48 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.75 mysql  1759654667.4819 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.62 mysql  1759654667.4836 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.74 mysql  1759654667.4854 select * from `users` where `id` = ? limit 1 1.11 mysql 1 1759654668.6129 local null null C:\laragon\www\eran_plastindo null 9c0486c3-6651-4012-a38a-07bf02704703 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 25.94 mysql  1759654667.4723 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.93 mysql  1759654667.476 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.85 mysql  1759654667.4781 select * from `products` where `products`.`deleted_at` is null limit 4 0.7 mysql  1759654667.48 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.75 mysql  1759654667.4819 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.62 mysql  1759654667.4836 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.74 mysql  1759654667.4854 select * from `users` where `id` = ? limit 1 1.11 mysql 1 1759654668.6129   null eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz 9QOks4FNXExuxz1ybXzLQB4UJvLoScc58vZRVnJ4 znYmWbtxfGVyU5K0wnKjVlV6Oru8K2rvkD7TUwfz http://eran_plastindo.co.id/dashboard   1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-56496305 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-56496305", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1449728268 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1449728268", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-476171522 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-476171522", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2033807907 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2033807907", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1145941569 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1145941569", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-444274154 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-444274154", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1682050854 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1682050854", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-217794247 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-217794247", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-497985487 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-497985487", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T08:57:49.115Z"} 
[2025-10-05 16:00:19] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:00:18.907Z"} 
[2025-10-05 16:00:19] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:00:18.908Z"} 
[2025-10-05 16:00:19] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:00:18.929Z"} 
[2025-10-05 16:00:19] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:00:18.931Z"} 
[2025-10-05 16:00:19] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:00:18.931Z"} 
[2025-10-05 16:17:19] local.DEBUG: [vite] server connection lost. Polling for restart... {"url":"http://eran_plastindo.co.id/news","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:11:01.057Z"} 
[2025-10-05 16:17:35] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:34.681Z"} 
[2025-10-05 16:17:35] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:34.681Z"} 
[2025-10-05 16:17:35] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:34.691Z"} 
[2025-10-05 16:17:35] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:34.693Z"} 
[2025-10-05 16:17:35] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:34.693Z"} 
[2025-10-05 16:17:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:54.098Z"} 
[2025-10-05 16:17:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:54.099Z"} 
[2025-10-05 16:17:54] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:54.135Z"} 
[2025-10-05 16:17:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:54.137Z"} 
[2025-10-05 16:17:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:17:54.137Z"} 
[2025-10-05 16:18:18] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:18:17.627Z"} 
[2025-10-05 16:18:18] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:18:17.628Z"} 
[2025-10-05 16:18:18] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:18:17.640Z"} 
[2025-10-05 16:18:18] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:18:17.641Z"} 
[2025-10-05 16:18:18] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-05T09:18:17.641Z"} 
[2025-10-06 07:16:00] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:15:58.150Z"} 
[2025-10-06 07:16:00] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:15:58.153Z"} 
[2025-10-06 07:16:00] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:15:58.218Z"} 
[2025-10-06 07:16:00] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:15:58.222Z"} 
[2025-10-06 07:16:00] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:15:58.222Z"} 
[2025-10-06 07:26:11] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:26:09.221Z"} 
[2025-10-06 07:26:11] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:26:09.222Z"} 
[2025-10-06 07:26:11] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:26:09.285Z"} 
[2025-10-06 07:26:11] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:26:09.289Z"} 
[2025-10-06 07:26:11] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:26:09.289Z"} 
[2025-10-06 07:28:56] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:28:55.225Z"} 
[2025-10-06 07:28:56] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:28:55.225Z"} 
[2025-10-06 07:28:56] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:28:55.258Z"} 
[2025-10-06 07:28:56] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:28:55.259Z"} 
[2025-10-06 07:28:56] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:28:55.259Z"} 
[2025-10-06 07:29:23] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:22.181Z"} 
[2025-10-06 07:29:23] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:22.182Z"} 
[2025-10-06 07:29:23] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:22.215Z"} 
[2025-10-06 07:29:23] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:22.217Z"} 
[2025-10-06 07:29:23] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:22.218Z"} 
[2025-10-06 07:29:31] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:30.666Z"} 
[2025-10-06 07:29:31] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:30.667Z"} 
[2025-10-06 07:29:31] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:30.707Z"} 
[2025-10-06 07:29:31] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:30.710Z"} 
[2025-10-06 07:29:31] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:29:30.710Z"} 
[2025-10-06 07:31:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:31:57.646Z"} 
[2025-10-06 07:31:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:31:57.646Z"} 
[2025-10-06 07:31:58] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:31:57.674Z"} 
[2025-10-06 07:31:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:31:57.675Z"} 
[2025-10-06 07:31:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:31:57.675Z"} 
[2025-10-06 07:33:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:33:45.469Z"} 
[2025-10-06 07:33:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:33:45.469Z"} 
[2025-10-06 07:33:46] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:33:45.561Z"} 
[2025-10-06 07:33:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:33:45.567Z"} 
[2025-10-06 07:33:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:33:45.567Z"} 
[2025-10-06 07:41:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:32.400Z"} 
[2025-10-06 07:41:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:32.400Z"} 
[2025-10-06 07:41:33] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:32.473Z"} 
[2025-10-06 07:41:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:32.479Z"} 
[2025-10-06 07:41:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:32.479Z"} 
[2025-10-06 07:41:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:47.555Z"} 
[2025-10-06 07:41:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:47.555Z"} 
[2025-10-06 07:41:48] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:47.584Z"} 
[2025-10-06 07:41:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:47.585Z"} 
[2025-10-06 07:41:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:41:47.585Z"} 
[2025-10-06 07:42:26] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:00.814Z"} 
[2025-10-06 07:42:27] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:00.814Z"} 
[2025-10-06 07:42:27] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:00.833Z"} 
[2025-10-06 07:42:27] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:00.837Z"} 
[2025-10-06 07:42:27] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:00.837Z"} 
[2025-10-06 07:42:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:58.284Z"} 
[2025-10-06 07:42:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:58.284Z"} 
[2025-10-06 07:42:58] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:58.306Z"} 
[2025-10-06 07:42:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:58.306Z"} 
[2025-10-06 07:42:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:42:58.306Z"} 
[2025-10-06 07:43:04] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:43:03.404Z"} 
[2025-10-06 07:43:04] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:43:03.404Z"} 
[2025-10-06 07:43:04] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:43:03.434Z"} 
[2025-10-06 07:43:04] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:43:03.441Z"} 
[2025-10-06 07:43:04] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:43:03.441Z"} 
[2025-10-06 07:44:40] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:44:39.951Z"} 
[2025-10-06 07:44:40] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:44:39.951Z"} 
[2025-10-06 07:44:40] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:44:39.970Z"} 
[2025-10-06 07:44:40] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:44:39.971Z"} 
[2025-10-06 07:44:40] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:44:39.971Z"} 
[2025-10-06 07:45:04] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:45:03.934Z"} 
[2025-10-06 07:45:04] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:45:03.935Z"} 
[2025-10-06 07:45:04] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:45:03.998Z"} 
[2025-10-06 07:45:04] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:45:04.020Z"} 
[2025-10-06 07:45:04] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:45:04.020Z"} 
[2025-10-06 07:46:25] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:46:24.278Z"} 
[2025-10-06 07:46:25] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:46:24.279Z"} 
[2025-10-06 07:46:25] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:46:24.296Z"} 
[2025-10-06 07:46:25] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:46:24.297Z"} 
[2025-10-06 07:46:25] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:46:24.297Z"} 
[2025-10-06 07:47:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:48.080Z"} 
[2025-10-06 07:47:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:48.080Z"} 
[2025-10-06 07:47:48] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:48.092Z"} 
[2025-10-06 07:47:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:48.094Z"} 
[2025-10-06 07:47:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:48.094Z"} 
[2025-10-06 07:47:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:53.717Z"} 
[2025-10-06 07:47:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:53.717Z"} 
[2025-10-06 07:47:54] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:53.729Z"} 
[2025-10-06 07:47:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:53.729Z"} 
[2025-10-06 07:47:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:53.729Z"} 
[2025-10-06 07:47:57] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:56.517Z"} 
[2025-10-06 07:47:57] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:56.517Z"} 
[2025-10-06 07:47:57] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:56.538Z"} 
[2025-10-06 07:47:57] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:56.539Z"} 
[2025-10-06 07:47:57] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:56.539Z"} 
[2025-10-06 07:47:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:58.010Z"} 
[2025-10-06 07:47:58] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:58.010Z"} 
[2025-10-06 07:47:58] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:58.026Z"} 
[2025-10-06 07:47:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:58.027Z"} 
[2025-10-06 07:47:58] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:47:58.027Z"} 
[2025-10-06 07:48:10] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:48:09.594Z"} 
[2025-10-06 07:48:10] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:48:09.595Z"} 
[2025-10-06 07:48:10] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:48:09.613Z"} 
[2025-10-06 07:48:10] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:48:09.613Z"} 
[2025-10-06 07:48:10] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:48:09.614Z"} 
[2025-10-06 07:53:05] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:04.068Z"} 
[2025-10-06 07:53:05] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:04.069Z"} 
[2025-10-06 07:53:05] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:04.115Z"} 
[2025-10-06 07:53:05] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:04.118Z"} 
[2025-10-06 07:53:05] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:04.118Z"} 
[2025-10-06 07:53:11] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:10.392Z"} 
[2025-10-06 07:53:11] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:10.392Z"} 
[2025-10-06 07:53:11] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:10.406Z"} 
[2025-10-06 07:53:11] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:10.412Z"} 
[2025-10-06 07:53:11] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:10.412Z"} 
[2025-10-06 07:53:12] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:11.837Z"} 
[2025-10-06 07:53:12] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:11.837Z"} 
[2025-10-06 07:53:12] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:11.862Z"} 
[2025-10-06 07:53:12] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:11.867Z"} 
[2025-10-06 07:53:12] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:11.867Z"} 
[2025-10-06 07:53:15] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:15.184Z"} 
[2025-10-06 07:53:15] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:15.184Z"} 
[2025-10-06 07:53:15] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:15.201Z"} 
[2025-10-06 07:53:15] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:15.202Z"} 
[2025-10-06 07:53:15] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:53:15.202Z"} 
[2025-10-06 07:54:24] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:23.330Z"} 
[2025-10-06 07:54:24] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:23.330Z"} 
[2025-10-06 07:54:24] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:23.355Z"} 
[2025-10-06 07:54:24] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:23.356Z"} 
[2025-10-06 07:54:24] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:23.356Z"} 
[2025-10-06 07:54:26] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:24.981Z"} 
[2025-10-06 07:54:26] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:24.981Z"} 
[2025-10-06 07:54:26] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:25.053Z"} 
[2025-10-06 07:54:26] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:25.067Z"} 
[2025-10-06 07:54:26] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:54:25.067Z"} 
[2025-10-06 07:56:14] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:13.862Z"} 
[2025-10-06 07:56:14] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:13.863Z"} 
[2025-10-06 07:56:14] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:13.877Z"} 
[2025-10-06 07:56:14] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:13.877Z"} 
[2025-10-06 07:56:14] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:13.877Z"} 
[2025-10-06 07:56:16] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:15.355Z"} 
[2025-10-06 07:56:16] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:15.355Z"} 
[2025-10-06 07:56:16] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:15.371Z"} 
[2025-10-06 07:56:16] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:15.371Z"} 
[2025-10-06 07:56:16] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:15.371Z"} 
[2025-10-06 07:56:23] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:22.914Z"} 
[2025-10-06 07:56:23] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:22.915Z"} 
[2025-10-06 07:56:23] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:22.947Z"} 
[2025-10-06 07:56:23] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:22.949Z"} 
[2025-10-06 07:56:23] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:22.949Z"} 
[2025-10-06 07:56:25] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:25.044Z"} 
[2025-10-06 07:56:25] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:25.044Z"} 
[2025-10-06 07:56:25] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:25.063Z"} 
[2025-10-06 07:56:25] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:25.068Z"} 
[2025-10-06 07:56:25] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:56:25.068Z"} 
[2025-10-06 07:58:13] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:58:13.026Z"} 
[2025-10-06 07:58:13] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:58:13.026Z"} 
[2025-10-06 07:58:13] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:58:13.040Z"} 
[2025-10-06 07:58:13] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:58:13.040Z"} 
[2025-10-06 07:58:13] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:58:13.040Z"} 
[2025-10-06 07:59:32] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:32.129Z"} 
[2025-10-06 07:59:32] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:32.129Z"} 
[2025-10-06 07:59:32] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:32.143Z"} 
[2025-10-06 07:59:32] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:32.147Z"} 
[2025-10-06 07:59:32] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:32.147Z"} 
[2025-10-06 07:59:34] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:33.878Z"} 
[2025-10-06 07:59:34] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:33.878Z"} 
[2025-10-06 07:59:34] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:33.895Z"} 
[2025-10-06 07:59:34] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:33.896Z"} 
[2025-10-06 07:59:34] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:33.896Z"} 
[2025-10-06 07:59:44] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:43.600Z"} 
[2025-10-06 07:59:44] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:43.600Z"} 
[2025-10-06 07:59:44] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:43.616Z"} 
[2025-10-06 07:59:44] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:43.617Z"} 
[2025-10-06 07:59:44] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T00:59:43.617Z"} 
[2025-10-06 08:02:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:33.111Z"} 
[2025-10-06 08:02:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:33.111Z"} 
[2025-10-06 08:02:33] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:33.122Z"} 
[2025-10-06 08:02:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:33.125Z"} 
[2025-10-06 08:02:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:33.125Z"} 
[2025-10-06 08:02:49] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:48.670Z"} 
[2025-10-06 08:02:49] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:48.670Z"} 
[2025-10-06 08:02:49] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:48.683Z"} 
[2025-10-06 08:02:49] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:48.684Z"} 
[2025-10-06 08:02:49] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:02:48.684Z"} 
[2025-10-06 08:16:59] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:16:59.155Z"} 
[2025-10-06 08:16:59] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:16:59.155Z"} 
[2025-10-06 08:16:59] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:16:59.167Z"} 
[2025-10-06 08:16:59] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:16:59.169Z"} 
[2025-10-06 08:16:59] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:16:59.169Z"} 
[2025-10-06 08:18:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:50.688Z"} 
[2025-10-06 08:18:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:50.688Z"} 
[2025-10-06 08:18:51] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:50.710Z"} 
[2025-10-06 08:18:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:50.711Z"} 
[2025-10-06 08:18:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:50.711Z"} 
[2025-10-06 08:18:53] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:53.177Z"} 
[2025-10-06 08:18:53] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:53.177Z"} 
[2025-10-06 08:18:53] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:53.197Z"} 
[2025-10-06 08:18:53] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:53.197Z"} 
[2025-10-06 08:18:53] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:18:53.197Z"} 
[2025-10-06 08:23:48] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:23:47.699Z"} 
[2025-10-06 08:23:48] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713827 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 1, 2025-10-06 08:23:43, 2025-10-06 08:23:43))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php4D4.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 4.79 mysql 1 1759713822.8946 select * from `cache` where `key` in (?) 0.81 mysql spatie.permission.cache 1759713822.9416 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.91 mysql App\Models\User 1759713822.9527 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.71 mysql App\Models\User 1759713822.9541 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.69 mysql About Us Visions thumbnails/AGsBxg8HdkALMvLbkDDWzQBusVHIfL1ttjWoxvaD.png 2025-10-06 08:23:43 2025-10-06 08:23:43 1759713823.0472 local null null C:\laragon\www\eran_plastindo null cd9a868a-5959-4727-99f1-77ba30b1c50d null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713827 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 1, 2025-10-06 08:23:43, 2025-10-06 08:23:43))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php4D4.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 4.79 mysql 1 1759713822.8946 select * from `cache` where `key` in (?) 0.81 mysql spatie.permission.cache 1759713822.9416 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.91 mysql App\Models\User 1759713822.9527 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.71 mysql App\Models\User 1759713822.9541 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.69 mysql About Us Visions thumbnails/AGsBxg8HdkALMvLbkDDWzQBusVHIfL1ttjWoxvaD.png 2025-10-06 08:23:43 2025-10-06 08:23:43 1759713823.0472 local null null C:\laragon\www\eran_plastindo null cd9a868a-5959-4727-99f1-77ba30b1c50d null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 1 2025-10-06 08:23:43 2025-10-06 08:23:43 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php4D4.tmp 1007869 image/png select * from `users` where `id` = ? limit 1 4.79 mysql 1 1759713822.8946 select * from `cache` where `key` in (?) 0.81 mysql spatie.permission.cache 1759713822.9416 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.91 mysql App\Models\User 1759713822.9527 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.71 mysql App\Models\User 1759713822.9541 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.69 mysql About Us Visions thumbnails/AGsBxg8HdkALMvLbkDDWzQBusVHIfL1ttjWoxvaD.png 2025-10-06 08:23:43 2025-10-06 08:23:43 1759713823.0472   null eran_plastindo.co.id keep-alive 1009342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 1, 2025-10-06 08:23:43, 2025-10-06 08:23:43)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:23:47.724Z"} 
[2025-10-06 08:23:58] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:23:58.261Z"} 
[2025-10-06 08:23:58] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713838 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 2, 2025-10-06 08:23:57, 2025-10-06 08:23:57))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php3F10.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 28.22 mysql 1 1759713837.7315 select * from `cache` where `key` in (?) 0.64 mysql spatie.permission.cache 1759713837.7425 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.85 mysql App\Models\User 1759713837.7532 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.69 mysql App\Models\User 1759713837.7548 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 1.21 mysql About Us Visions thumbnails/fiTAjadxyUo3y55TjetCzPkuNRvuYmrTPCSJz8To.png 2025-10-06 08:23:57 2025-10-06 08:23:57 1759713837.826 local null null C:\laragon\www\eran_plastindo null b7f7de8b-da1b-4cb7-8b8e-22271664785e null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713838 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 2, 2025-10-06 08:23:57, 2025-10-06 08:23:57))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php3F10.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 28.22 mysql 1 1759713837.7315 select * from `cache` where `key` in (?) 0.64 mysql spatie.permission.cache 1759713837.7425 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.85 mysql App\Models\User 1759713837.7532 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.69 mysql App\Models\User 1759713837.7548 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 1.21 mysql About Us Visions thumbnails/fiTAjadxyUo3y55TjetCzPkuNRvuYmrTPCSJz8To.png 2025-10-06 08:23:57 2025-10-06 08:23:57 1759713837.826 local null null C:\laragon\www\eran_plastindo null b7f7de8b-da1b-4cb7-8b8e-22271664785e null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 2 2025-10-06 08:23:57 2025-10-06 08:23:57 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php3F10.tmp 1007869 image/png select * from `users` where `id` = ? limit 1 28.22 mysql 1 1759713837.7315 select * from `cache` where `key` in (?) 0.64 mysql spatie.permission.cache 1759713837.7425 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 0.85 mysql App\Models\User 1759713837.7532 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.69 mysql App\Models\User 1759713837.7548 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 1.21 mysql About Us Visions thumbnails/fiTAjadxyUo3y55TjetCzPkuNRvuYmrTPCSJz8To.png 2025-10-06 08:23:57 2025-10-06 08:23:57 1759713837.826   null eran_plastindo.co.id keep-alive 1009342 no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 2, 2025-10-06 08:23:57, 2025-10-06 08:23:57)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:23:58.271Z"} 
[2025-10-06 08:26:34] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:26:34.262Z"} 
[2025-10-06 08:26:34] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713994 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 3, 2025-10-06 08:26:33, 2025-10-06 08:26:33))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php9FC6.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 4.68 mysql 1 1759713993.6746 select * from `cache` where `key` in (?) 1.34 mysql spatie.permission.cache 1759713993.6899 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.33 mysql App\Models\User 1759713993.7023 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.21 mysql App\Models\User 1759713993.7043 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.85 mysql About Us Visions thumbnails/SQaDljBwThf2njz1pEknZFQQGqPJDtvm7po9FMf2.png 2025-10-06 08:26:33 2025-10-06 08:26:33 1759713993.7852 local null null C:\laragon\www\eran_plastindo null c6b464cb-4f03-41ad-84c0-ab351e9812d0 null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759713994 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 3, 2025-10-06 08:26:33, 2025-10-06 08:26:33))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php9FC6.tmp 1007869 image/png eran_plastindo.co.id keep-alive 1009342 max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 4.68 mysql 1 1759713993.6746 select * from `cache` where `key` in (?) 1.34 mysql spatie.permission.cache 1759713993.6899 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.33 mysql App\Models\User 1759713993.7023 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.21 mysql App\Models\User 1759713993.7043 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.85 mysql About Us Visions thumbnails/SQaDljBwThf2njz1pEknZFQQGqPJDtvm7po9FMf2.png 2025-10-06 08:26:33 2025-10-06 08:26:33 1759713993.7852 local null null C:\laragon\www\eran_plastindo null c6b464cb-4f03-41ad-84c0-ab351e9812d0 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 3 2025-10-06 08:26:33 2025-10-06 08:26:33 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 52 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Display the specified resource. */ public function show(CompanyAbout $about) { attributes Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 40 store App\Http\Controllers\CompanyAboutController /** * Show the form for creating a new resource. */ public function create() { // return view ('admin.abouts.create'); } null /** * Store a newly created resource in storage. */ public function store(StoreAboutRequest $request) { // DB::transaction(function () use ($request) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $newAbout = CompanyAbout::create($validated); null if(!empty($validated['keypoints'])) { foreach($validated['keypoints'] as $keypoint){ $newAbout->keypoints()->create([ 'keypoint' => $keypoint ]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:40-57 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request POST http://eran_plastindo.co.id/admin/abouts App\Http\Requests\StoreAboutRequest false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method store string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request POST http://eran_plastindo.co.id/admin/abouts Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts null POST Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi About Us Visions Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. C:\Users\User\AppData\Local\Temp\php9FC6.tmp 1007869 image/png select * from `users` where `id` = ? limit 1 4.68 mysql 1 1759713993.6746 select * from `cache` where `key` in (?) 1.34 mysql spatie.permission.cache 1759713993.6899 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.33 mysql App\Models\User 1759713993.7023 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.21 mysql App\Models\User 1759713993.7043 insert into `company_abouts` (`name`, `type`, `thumbnail`, `updated_at`, `created_at`) values (?, ?, ?, ?, ?) 0.85 mysql About Us Visions thumbnails/SQaDljBwThf2njz1pEknZFQQGqPJDtvm7po9FMf2.png 2025-10-06 08:26:33 2025-10-06 08:26:33 1759713993.7852   null eran_plastindo.co.id keep-alive 1009342 max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryBBkPwj6pEsE0LbiO text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/create gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/create    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.store  App\Http\Controllers\CompanyAboutController@store web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Manufactures precision components and plastic injection parts for two & four-wheeled vehicles. Since 2020, focuses on being a key supply chain partner for leading Indonesian companies, including Astra Honda Motor  Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts., 3, 2025-10-06 08:26:33, 2025-10-06 08:26:33)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:26:34.281Z"} 
[2025-10-06 08:30:23] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:30:22.893Z"} 
[2025-10-06 08:30:23] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714222 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:30:22, 2025-10-06 08:30:22))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryLOeimfKQySL2ioZr 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 14.05 mysql 1 1759714222.3419 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.81 mysql 4 1759714222.3501 select * from `cache` where `key` in (?) 0.82 mysql spatie.permission.cache 1759714222.3538 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.07 mysql App\Models\User 1759714222.3655 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.25 mysql App\Models\User 1759714222.3674 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.48 mysql 2025-10-06 08:30:22 2025-10-06 08:30:22 4 1759714222.4015 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 1.06 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 1759714222.4031 local null null C:\laragon\www\eran_plastindo null 2809a418-7d09-483a-9aa8-aa72489cbcb8 null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714222 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:30:22, 2025-10-06 08:30:22))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryLOeimfKQySL2ioZr 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 14.05 mysql 1 1759714222.3419 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.81 mysql 4 1759714222.3501 select * from `cache` where `key` in (?) 0.82 mysql spatie.permission.cache 1759714222.3538 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.07 mysql App\Models\User 1759714222.3655 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.25 mysql App\Models\User 1759714222.3674 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.48 mysql 2025-10-06 08:30:22 2025-10-06 08:30:22 4 1759714222.4015 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 1.06 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 1759714222.4031 local null null C:\laragon\www\eran_plastindo null 2809a418-7d09-483a-9aa8-aa72489cbcb8 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  select * from `users` where `id` = ? limit 1 14.05 mysql 1 1759714222.3419 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.81 mysql 4 1759714222.3501 select * from `cache` where `key` in (?) 0.82 mysql spatie.permission.cache 1759714222.3538 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.07 mysql App\Models\User 1759714222.3655 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.25 mysql App\Models\User 1759714222.3674 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.48 mysql 2025-10-06 08:30:22 2025-10-06 08:30:22 4 1759714222.4015 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 1.06 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:22 2025-10-06 08:30:22 1759714222.4031   null eran_plastindo.co.id keep-alive 1342 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryLOeimfKQySL2ioZr 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:30:22, 2025-10-06 08:30:22)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:30:22.917Z"} 
[2025-10-06 08:30:39] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:30:38.885Z"} 
[2025-10-06 08:30:39] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714238 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer, 4, 2025-10-06 08:30:38, 2025-10-06 08:30:38))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer  eran_plastindo.co.id keep-alive 1341 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundarykPFDtI913II1fdfA 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 29.41 mysql 1 1759714238.4092 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.77 mysql 4 1759714238.4173 select * from `cache` where `key` in (?) 0.91 mysql spatie.permission.cache 1759714238.4209 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.16 mysql App\Models\User 1759714238.4327 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.08 mysql App\Models\User 1759714238.4344 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.52 mysql 2025-10-06 08:30:38 2025-10-06 08:30:38 4 1759714238.4735 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.79 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:38 2025-10-06 08:30:38 1759714238.4749 local null null C:\laragon\www\eran_plastindo null a3e81c19-cb5a-4923-983a-008b17805fe4 null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714238 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer, 4, 2025-10-06 08:30:38, 2025-10-06 08:30:38))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer  eran_plastindo.co.id keep-alive 1341 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundarykPFDtI913II1fdfA 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 29.41 mysql 1 1759714238.4092 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.77 mysql 4 1759714238.4173 select * from `cache` where `key` in (?) 0.91 mysql spatie.permission.cache 1759714238.4209 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.16 mysql App\Models\User 1759714238.4327 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.08 mysql App\Models\User 1759714238.4344 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.52 mysql 2025-10-06 08:30:38 2025-10-06 08:30:38 4 1759714238.4735 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.79 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:38 2025-10-06 08:30:38 1759714238.4749 local null null C:\laragon\www\eran_plastindo null a3e81c19-cb5a-4923-983a-008b17805fe4 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer 4 2025-10-06 08:30:38 2025-10-06 08:30:38 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer  select * from `users` where `id` = ? limit 1 29.41 mysql 1 1759714238.4092 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.77 mysql 4 1759714238.4173 select * from `cache` where `key` in (?) 0.91 mysql spatie.permission.cache 1759714238.4209 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.16 mysql App\Models\User 1759714238.4327 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 1.08 mysql App\Models\User 1759714238.4344 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.52 mysql 2025-10-06 08:30:38 2025-10-06 08:30:38 4 1759714238.4735 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.79 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:30:38 2025-10-06 08:30:38 1759714238.4749   null eran_plastindo.co.id keep-alive 1341 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundarykPFDtI913II1fdfA 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer, 4, 2025-10-06 08:30:38, 2025-10-06 08:30:38)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:30:38.893Z"} 
[2025-10-06 08:31:06] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:31:06.242Z"} 
[2025-10-06 08:31:06] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714266 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539 local null null C:\laragon\www\eran_plastindo null 8dafe436-d5d6-4ad7-9e41-bf7eb3ebcf55 null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714266 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539 local null null C:\laragon\www\eran_plastindo null 8dafe436-d5d6-4ad7-9e41-bf7eb3ebcf55 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539   null eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:31:06.250Z"} 
[2025-10-06 08:32:23] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:22.169Z"} 
[2025-10-06 08:32:23] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714266 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539 local null null C:\laragon\www\eran_plastindo null 8dafe436-d5d6-4ad7-9e41-bf7eb3ebcf55 null null Laravel Client PHP 11.46.1 8.3.25 Illuminate\Database\QueryException 1759714266 SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05))   https://laravel.com/docs/11.x/eloquent C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 8.3.25 11.46.1 en false true local insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?)   select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539 local null null C:\laragon\www\eran_plastindo null 8dafe436-d5d6-4ad7-9e41-bf7eb3ebcf55 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 825 runQueryCallback Illuminate\Database\Connection // took to execute and log the query SQL, bindings and time in our memory. try { return $callback($query, $bindings); } null // If an exception occurs when attempting to run a query, we'll format the error // message to include the bindings with SQL, which will make this exception a // lot more helpful to the developer instead of just the database's errors. catch (Exception $e) { if ($this->isUniqueConstraintError($e)) { throw new UniqueConstraintViolationException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } null throw new QueryException( $this->getName(), $query, $this->prepareBindings($bindings), $e ); } } null /** * Determine if the given database exception was caused by a unique constraint violation. * * @param  \Exception  $exception * @return bool */ protected function isUniqueConstraintError(Exception $exception) { return false;  false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Connection.php 779 run Illuminate\Database\Connection */ protected function run($query, $bindings, Closure $callback) { foreach ($this->beforeExecutingCallbacks as $beforeExecutingCallback) { $beforeExecutingCallback($query, $bindings, $this); } null $this->reconnectIfMissingConnection(); null $start = microtime(true); null // Here we will run this query. If an exception occurs we'll determine if it was // caused by a connection that has been lost. If that is the cause, we'll try // to re-establish connection and re-run the query with a fresh connection. try { $result = $this->runQueryCallback($query, $bindings, $callback); } catch (QueryException $e) { $result = $this->handleQueryException( $e, $query, $bindings, $callback ); } null // Once we have run the query we will calculate the time that it took to run and // then log the query, bindings, and execution time so we will report them on // the event that the developer needs them. We'll log time in milliseconds. $this->logQuery( $query, $bindings, $this->getElapsedTime($start) ); null return $result; query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Connection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php 42 insert Illuminate\Database\MySqlConnection public function getDriverTitle() { return $this->isMaria() ? 'MariaDB' : 'MySQL'; } null /** * Run an insert statement against the database. * * @param  string  $query * @param  array  $bindings * @param  string|null  $sequence * @return bool */ public function insert($query, $bindings = [], $sequence = null) { return $this->run($query, $bindings, function ($query, $bindings) use ($sequence) { if ($this->pretending()) { return true; } null $statement = $this->getPdo()->prepare($query); null $this->bindValues($statement, $this->prepareBindings($bindings)); null $this->recordsHaveBeenModified(); null $result = $statement->execute(); null $this->lastInsertId = $this->getPdo()->lastInsertId($sequence); null query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php:42-58 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\MySqlConnection.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php 35 processInsertGetId Illuminate\Database\Query\Processors\MySqlProcessor return ((object) $result)->column_name; }, $results); } null /** * Process an  "insert get ID" query. * * @param  \Illuminate\Database\Query\Builder  $query * @param  string  $sql * @param  array  $values * @param  string|null  $sequence * @return int */ public function processInsertGetId(Builder $query, $sql, $values, $sequence = null) { $query->getConnection()->insert($sql, $values, $sequence); null $id = $query->getConnection()->getLastInsertId(); null return is_numeric($id) ? (int) $id : $id; } null /** * Process the results of a columns query. * * @param  array  $results * @return array */ public function processColumns($results) { query insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false bindings Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Processors\MySqlProcessor.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php 3766 insertGetId Illuminate\Database\Query\Builder null /** * Insert a new record and get the value of the primary key. * * @param  string|null  $sequence * @return int */ public function insertGetId(array $values, $sequence = null) { $this->applyBeforeQueryCallbacks(); null $sql = $this->grammar->compileInsertGetId($this, $values, $sequence); null $values = $this->cleanBindings($values); null return $this->processor->processInsertGetId($this, $sql, $values, $sequence); } null /** * Insert new records into the table using a subquery. * * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query * @return int */ public function insertUsing(array $columns, $query) { $this->applyBeforeQueryCallbacks(); null [$sql, $bindings] = $this->createSub($query); null query object Illuminate\Database\Query\Builder false false false sql insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) string false false false values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Query\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php 2120 __call Illuminate\Database\Eloquent\Builder if (static::hasGlobalMacro($method)) { $callable = static::$macros[$method]; null if ($callable instanceof Closure) { $callable = $callable->bindTo($this, static::class); } null return $callable(...$parameters); } null if ($this->hasNamedScope($method)) { return $this->callNamedScope($method, $parameters); } null if (in_array(strtolower($method), $this->passthru)) { return $this->toBase()->{$method}(...$parameters); } null $this->forwardCallTo($this->query, $method, $parameters); null return $this; } null /** * Dynamically handle calls into the query instance. * * @param  string  $method * @param  array  $parameters * @return mixed * values Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false sequence id string false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Builder.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1359 insertAndSetId Illuminate\Database\Eloquent\Model null $this->fireModelEvent('created', false); null return true; } null /** * Insert the given attributes and set the ID on the model. * * @param  \Illuminate\Database\Eloquent\Builder<static>  $query * @param  array  $attributes * @return void */ protected function insertAndSetId(Builder $query, $attributes) { $id = $query->insertGetId($attributes, $keyName = $this->getKeyName()); null $this->setAttribute($keyName, $id); } null /** * Destroy the models for the given IDs. * * @param  \Illuminate\Support\Collection|array|int|string  $ids * @return int */ public static function destroy($ids) { if ($ids instanceof EloquentCollection) { $ids = $ids->modelKeys(); method insertGetId string false false false parameters array (size=4) id array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1324 performInsert Illuminate\Database\Eloquent\Model } null // First we'll need to create a fresh query instance and touch the creation and // update timestamps on this model, which are maintained by us for developer // convenience. After, we will just continue saving these model instances. if ($this->usesTimestamps()) { $this->updateTimestamps(); } null // If the model has an incrementing key, we can use the "insertGetId" method on // the query builder, which will give us back the final inserted ID for this // table from the database. Not all tables have to be incrementing though. $attributes = $this->getAttributesForInsert(); null if ($this->getIncrementing()) { $this->insertAndSetId($query, $attributes); } null // If the table isn't incrementing we'll simply insert these attributes as they // are. These attribute arrays must contain an "id" column previously placed // there by the developer as the manually determined key for these models. else { if (empty($attributes)) { return true; } null $query->insert($attributes); } null // We will go ahead and set the exists property to true, so that it is set when query object Illuminate\Database\Eloquent\Builder false false false attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php 1163 save Illuminate\Database\Eloquent\Model return false; } null // If the model already exists in the database we can just update our record // that is already in this database using the current IDs in this "where" // clause to only update this model. Otherwise, we'll just insert them. if ($this->exists) { $saved = $this->isDirty() ? $this->performUpdate($query) : true; } null // If the model is brand new, we'll insert it into our database and set the // ID attribute on the model to the value of the newly inserted row's ID // which is typically an auto-increment value managed by the database. else { $saved = $this->performInsert($query); null if (! $this->getConnectionName() && $connection = $query->getConnection()) { $this->setConnection($connection->getName()); } } null // If the model is successfully saved, we need to do a few more things once // that is done. We will call the "saved" method here to run any actions // we need to happen after a model gets successfully saved right here. if ($saved) { $this->finishSave($options); } null query object Illuminate\Database\Eloquent\Builder false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Model.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 371 Illuminate\Database\Eloquent\Relations\{closure} Illuminate\Database\Eloquent\Relations\HasOneOrMany return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ public function createQuietly(array $attributes = []) { return Model::withoutEvents(fn () => $this->create($attributes)); options  array false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\helpers.php 399 tap null /** * Call the given Closure with the given value then return the value. * * @template TValue * * @param  TValue  $value * @param  (callable(TValue): mixed)|null  $callback * @return ($callback is null ? \Illuminate\Support\HigherOrderTapProxy : TValue) */ function tap($value, $callback = null) { if (is_null($callback)) { return new HigherOrderTapProxy($value); } null $callback($value); null return $value; } } null if (! function_exists('throw_if')) { /** * Throw the given exception if the given condition is true. * * @template TValue * @template TException of \Throwable * * @param  TValue  $condition * @param  TException|class-string<TException>|string  $exception arg0 id: App\Models\CompanyKeypoint false false false false vendor\laravel\framework\src\Illuminate\Support\helpers.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php 368 create Illuminate\Database\Eloquent\Relations\HasOneOrMany public function saveManyQuietly($models) { return Model::withoutEvents(function () use ($models) { return $this->saveMany($models); }); } null /** * Create a new instance of the related model. * * @param  array  $attributes * @return TRelatedModel */ public function create(array $attributes = []) { return tap($this->related->newInstance($attributes), function ($instance) { $this->setForeignAttributesForCreate($instance); null $instance->save(); null $this->applyInverseRelationToModel($instance); }); } null /** * Create a new instance of the related model without raising any events to the parent model. * * @param  array  $attributes * @return TRelatedModel */ value id: App\Models\CompanyKeypoint false false false callback C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php:368-374 Closure false false false false vendor\laravel\framework\src\Illuminate\Database\Eloquent\Relations\HasOneOrMany.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 98 App\Http\Controllers\{closure} App\Http\Controllers\CompanyAboutController { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); } } }); null return redirect()->route('admin.abouts.index')->with('success', 'About created successfully'); } null /** * Remove the specified resource from storage. */ public function destroy(CompanyAbout $about) { // attributes Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer. array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php 32 transaction Illuminate\Database\Connection * @param  (\Closure(static): TReturn)  $callback * @param  int  $attempts * @return TReturn * * @throws \Throwable */ public function transaction(Closure $callback, $attempts = 1) { for ($currentAttempt = 1; $currentAttempt <= $attempts; $currentAttempt++) { $this->beginTransaction(); null // We'll simply execute the given callback within a try / catch block and if we // catch any exception we can rollback this transaction so that none of this // gets actually persisted to a database or stored in a permanent fashion. try { $callbackResult = $callback($this); } null // If we catch an exception we'll rollback this transaction and try again if we // are not out of attempts. If we are out of attempts we will just throw the // exception back out, and let the developer handle an uncaught exception. catch (Throwable $e) { $this->handleTransactionException( $e, $currentAttempt, $attempts ); null continue; } null $levelBeingCommitted = $this->transactions; arg0 object Illuminate\Database\MySqlConnection false false false false vendor\laravel\framework\src\Illuminate\Database\Concerns\ManagesTransactions.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php 495 __call Illuminate\Database\DatabaseManager /** * Set the application instance used by the manager. * * @param  \Illuminate\Contracts\Foundation\Application  $app * @return $this */ public function setApplication($app) { $this->app = $app; null return $this; } null /** * Dynamically pass methods to the default connection. * * @param  string  $method * @param  array  $parameters * @return mixed */ public function __call($method, $parameters) { if (static::hasMacro($method)) { return $this->macroCall($method, $parameters); } null return $this->connection()->$method(...$parameters); } } null callback C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 Closure false false false attempts 1 int false false false false vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php 361 __callStatic Illuminate\Support\Facades\Facade * * @param  \Illuminate\Contracts\Foundation\Application|null  $app * @return void */ public static function setFacadeApplication($app) { static::$app = $app; } null /** * Handle dynamic, static calls to the object. * * @param  string  $method * @param  array  $args * @return mixed * * @throws \RuntimeException */ public static function __callStatic($method, $args) { $instance = static::getFacadeRoot(); null if (! $instance) { throw new RuntimeException('A facade root has not been set.'); } null return $instance->$method(...$args); } } null method transaction string false false false parameters C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false false vendor\laravel\framework\src\Illuminate\Support\Facades\Facade.php C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php 85 update App\Http\Controllers\CompanyAboutController /** * Show the form for editing the specified resource. */ public function edit(CompanyAbout $about) { // return view('admin.abouts.edit', compact('about')); } null /** * Update the specified resource in storage. */ public function update(UpdateAboutRequest $request, CompanyAbout $about) { // DB::transaction(function () use ($request, $about) { $validated = $request->validated(); null if($request->hasFile('thumbnail')){ $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public'); $validated['thumbnail'] = $thumbnailPath; //storage/thumbnails/angga.png } null $about->update($validated); null if(!empty($validated['keypoints'])){ $about->keypoints()->delete(); foreach($validated['keypoints'] as $keypoint) { $about->keypoints()->create([ 'keypoint' => $keypoint]); method transaction string false false false args C:\laragon\www\eran_plastindo\app\Http\Controllers\CompanyAboutController.php:85-102 array false false false true app\Http\Controllers\CompanyAboutController.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php 47 dispatch Illuminate\Routing\ControllerDispatcher * Dispatch a request to a given controller and method. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return mixed */ public function dispatch(Route $route, $controller, $method) { $parameters = $this->resolveParameters($route, $controller, $method); null if (method_exists($controller, 'callAction')) { return $controller->callAction($method, $parameters); } null return $controller->{$method}(...array_values($parameters)); } null /** * Resolve the parameters for the controller. * * @param  \Illuminate\Routing\Route  $route * @param  mixed  $controller * @param  string  $method * @return array */ protected function resolveParameters(Route $route, $controller, $method) { return $this->resolveClassMethodDependencies( $route->parametersWithoutNulls(), $controller, $method request PUT http://eran_plastindo.co.id/admin/abouts/4 App\Http\Requests\UpdateAboutRequest false false false about id:4 App\Models\CompanyAbout false false false false vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 266 runController Illuminate\Routing\Route */ protected function isSerializedClosure() { return RouteAction::containsSerializedClosure($this->action); } null /** * Run the route action and return the response. * * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException */ protected function runController() { return $this->controllerDispatcher()->dispatch( $this, $this->getController(), $this->getControllerMethod() ); } null /** * Get the controller instance for the route. * * @return mixed */ public function getController() { if (! $this->isControllerAction()) { return null; } route object Illuminate\Routing\Route false false false controller object App\Http\Controllers\CompanyAboutController false false false method update string false false false false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Route.php 212 run Illuminate\Routing\Route { return RouteAction::parse($this->uri, $action); } null /** * Run the route action and return the response. * * @return mixed */ public function run() { $this->container = $this->container ?: new Container; null try { if ($this->isControllerAction()) { return $this->runController(); } null return $this->runCallable(); } catch (HttpResponseException $e) { return $e->getResponse(); } } null /** * Checks whether the route's action is a controller. * * @return bool */ protected function isControllerAction()  false vendor\laravel\framework\src\Illuminate\Routing\Route.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 808 Illuminate\Routing\{closure} Illuminate\Routing\Router * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null  false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php 60 handle Illuminate\Auth\Middleware\Authorize * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  $ability * @param  array|null  ...$models * @return mixed * * @throws \Illuminate\Auth\AuthenticationException * @throws \Illuminate\Auth\Access\AuthorizationException */ public function handle($request, Closure $next, $ability, ...$models) { $this->gate->authorize($ability, $this->getGateArguments($request, $models)); null return $next($request); } null /** * Get the arguments parameter for the gate. * * @param  \Illuminate\Http\Request  $request * @param  array|null  $models * @return array */ protected function getGateArguments($request, $models) { if (is_null($models)) { return []; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authorize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false ability manage abouts string false false false models  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php 64 handle Illuminate\Auth\Middleware\Authenticate null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @param  string  ...$guards * @return mixed * * @throws \Illuminate\Auth\AuthenticationException */ public function handle($request, Closure $next, ...$guards) { $this->authenticate($request, $guards); null return $next($request); } null /** * Determine if the user is logged in to any of the given guards. * * @param  \Illuminate\Http\Request  $request * @param  array  $guards * @return void * * @throws \Illuminate\Auth\AuthenticationException */ protected function authenticate($request, array $guards) { if (empty($guards)) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Auth\Middleware\Authenticate.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false guards  array false true false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request PUT http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/admin/abouts/4 null PUT Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36  1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi PUT About Us Visions Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer.  select * from `users` where `id` = ? limit 1 26.73 mysql 1 1759714265.7971 select * from `company_abouts` where `id` = ? and `company_abouts`.`deleted_at` is null limit 1 0.76 mysql 4 1759714265.8047 select * from `cache` where `key` in (?) 0.79 mysql spatie.permission.cache 1759714265.8085 select `permissions`.*, `model_has_permissions`.`model_id` as `pivot_model_id`, `model_has_permissions`.`permission_id` as `pivot_permission_id`, `model_has_permissions`.`model_type` as `pivot_model_type` from `permissions` inner join `model_has_permissions` on `permissions`.`id` = `model_has_permissions`.`permission_id` where `model_has_permissions`.`model_id` in (1) and `model_has_permissions`.`model_type` = ? 1.22 mysql App\Models\User 1759714265.8203 select `roles`.*, `model_has_roles`.`model_id` as `pivot_model_id`, `model_has_roles`.`role_id` as `pivot_role_id`, `model_has_roles`.`model_type` as `pivot_model_type` from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `model_has_roles`.`model_id` in (1) and `model_has_roles`.`model_type` = ? 0.97 mysql App\Models\User 1759714265.822 update `company_keypoints` set `deleted_at` = ?, `company_keypoints`.`updated_at` = ? where `company_keypoints`.`company_about_id` = ? and `company_keypoints`.`company_about_id` is not null and `company_keypoints`.`deleted_at` is null 1.32 mysql 2025-10-06 08:31:05 2025-10-06 08:31:05 4 1759714265.8527 insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) 0.68 mysql Plastic injection industry parts for automotive, home application and etc. since 2020,  focuses on being a key supply chain partner for leading Indonesian companies, including PT.Astra Otoparts. 4 2025-10-06 08:31:05 2025-10-06 08:31:05 1759714265.8539   null eran_plastindo.co.id keep-alive 1374 max-age=0 http://eran_plastindo.co.id multipart/form-data; boundary=----WebKitFormBoundaryzlAwPrLFA8GQpE49 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/abouts/4/edit gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/abouts/4/edit    1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z  1 superadmin web 2025-10-05T08:43:59.000000Z 2025-10-05T08:43:59.000000Z App\Models\User 1 1 admin.abouts.update 4 About Us thumbnails/PcjMgZ7guobJzUtRMHbAFnsR02xhRZOK5dYGPPMF.png Visions null 2025-10-06T01:26:44.000000Z 2025-10-06T01:26:44.000000Z App\Http\Controllers\CompanyAboutController@update web auth can:manage abouts null null null insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (?, ?, ?, ?) null null  web http://eran_plastindo.co.id/admin/abouts/4 Illuminate\Database\QueryException SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'keypoint' at row 1 (Connection: mysql, SQL: insert into `company_keypoints` (`keypoint`, `company_about_id`, `updated_at`, `created_at`) values (Through hard work and dedication, we continuously improve. In 2023, we achieved ISO 9001:2015 certificate. in 2024, expanded our factory, and upgraded machineries to boost capacity to 1+ million pcs/month, leading plastic injection industry strengthening our position as a leading precision and plastic injection parts manufacturer., 4, 2025-10-06 08:31:05, 2025-10-06 08:31:05)) C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Database\Connection runQueryCallback   https://laravel.com/docs/11.x/eloquent {"url":"http://eran_plastindo.co.id/admin/abouts/4","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:22.195Z"} 
[2025-10-06 08:32:29] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:29.232Z"} 
[2025-10-06 08:32:29] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:29.232Z"} 
[2025-10-06 08:32:29] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:29.247Z"} 
[2025-10-06 08:32:29] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:29.247Z"} 
[2025-10-06 08:32:29] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:29.247Z"} 
[2025-10-06 08:32:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:32.608Z"} 
[2025-10-06 08:32:33] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:32.608Z"} 
[2025-10-06 08:32:33] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:32.623Z"} 
[2025-10-06 08:32:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:32.624Z"} 
[2025-10-06 08:32:33] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:32:32.624Z"} 
[2025-10-06 08:34:14] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:34:14.321Z"} 
[2025-10-06 08:34:14] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:34:14.321Z"} 
[2025-10-06 08:34:14] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:34:14.338Z"} 
[2025-10-06 08:34:14] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:34:14.339Z"} 
[2025-10-06 08:34:14] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:34:14.339Z"} 
[2025-10-06 08:52:59] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:52:59.152Z"} 
[2025-10-06 08:52:59] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715579 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/appointments   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1370167060 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1370167060", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1442968276 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1442968276", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1541893334 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1541893334", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-296990682 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-296990682", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-780066884 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-780066884", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-588454114 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-588454114", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-313178383 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-313178383", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1527994104 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1527994104", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1199243398 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1199243398", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 16.61 mysql  1759715578.116 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.76 mysql  1759715578.1196 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.67 mysql  1759715578.1213 select * from `products` where `products`.`deleted_at` is null limit 4 0.67 mysql  1759715578.1229 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.68 mysql  1759715578.1245 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.72 mysql  1759715578.1262 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.72 mysql  1759715578.1278 select * from `users` where `id` = ? limit 1 0.94 mysql 1 1759715578.668 local null null C:\laragon\www\eran_plastindo null 09183edf-3ba3-4592-8ed1-4cf08704fe40 null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715579 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/appointments   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1370167060 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1370167060", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1442968276 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1442968276", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1541893334 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1541893334", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-296990682 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-296990682", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-780066884 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-780066884", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-588454114 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-588454114", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-313178383 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-313178383", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1527994104 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1527994104", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1199243398 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1199243398", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 16.61 mysql  1759715578.116 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.76 mysql  1759715578.1196 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.67 mysql  1759715578.1213 select * from `products` where `products`.`deleted_at` is null limit 4 0.67 mysql  1759715578.1229 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.68 mysql  1759715578.1245 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.72 mysql  1759715578.1262 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.72 mysql  1759715578.1278 select * from `users` where `id` = ? limit 1 0.94 mysql 1 1759715578.668 local null null C:\laragon\www\eran_plastindo null 09183edf-3ba3-4592-8ed1-4cf08704fe40 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 16.61 mysql  1759715578.116 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.76 mysql  1759715578.1196 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.67 mysql  1759715578.1213 select * from `products` where `products`.`deleted_at` is null limit 4 0.67 mysql  1759715578.1229 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.68 mysql  1759715578.1245 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.72 mysql  1759715578.1262 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.72 mysql  1759715578.1278 select * from `users` where `id` = ? limit 1 0.94 mysql 1 1759715578.668   null eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id/admin/appointments   http://eran_plastindo.co.id/dashboard 1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1370167060 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1370167060", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1442968276 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1442968276", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1541893334 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1541893334", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-296990682 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-296990682", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-780066884 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-780066884", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-588454114 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-588454114", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-313178383 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-313178383", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1527994104 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1527994104", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1199243398 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1199243398", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:52:59.174Z"} 
[2025-10-06 08:53:06] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:53:05.587Z"} 
[2025-10-06 08:53:06] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715585 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-995901550 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-995901550", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2037254823 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2037254823", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-630124214 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-630124214", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-469574734 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-469574734", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982975613 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982975613", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-350230610 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-350230610", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-439668058 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-439668058", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-756280333 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-756280333", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-569361 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-569361", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 23.02 mysql  1759715585.0122 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.72 mysql  1759715585.0159 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715585.0177 select * from `products` where `products`.`deleted_at` is null limit 4 0.64 mysql  1759715585.0194 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.72 mysql  1759715585.0212 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.61 mysql  1759715585.0228 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.68 mysql  1759715585.0245 select * from `users` where `id` = ? limit 1 0.96 mysql 1 1759715585.1226 local null null C:\laragon\www\eran_plastindo null 841386fe-2a77-4cbf-92cc-619caa8f05f5 null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715585 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-995901550 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-995901550", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2037254823 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2037254823", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-630124214 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-630124214", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-469574734 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-469574734", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982975613 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982975613", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-350230610 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-350230610", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-439668058 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-439668058", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-756280333 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-756280333", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-569361 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-569361", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 23.02 mysql  1759715585.0122 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.72 mysql  1759715585.0159 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715585.0177 select * from `products` where `products`.`deleted_at` is null limit 4 0.64 mysql  1759715585.0194 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.72 mysql  1759715585.0212 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.61 mysql  1759715585.0228 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.68 mysql  1759715585.0245 select * from `users` where `id` = ? limit 1 0.96 mysql 1 1759715585.1226 local null null C:\laragon\www\eran_plastindo null 841386fe-2a77-4cbf-92cc-619caa8f05f5 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 23.02 mysql  1759715585.0122 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.72 mysql  1759715585.0159 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715585.0177 select * from `products` where `products`.`deleted_at` is null limit 4 0.64 mysql  1759715585.0194 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.72 mysql  1759715585.0212 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.61 mysql  1759715585.0228 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.68 mysql  1759715585.0245 select * from `users` where `id` = ? limit 1 0.96 mysql 1 1759715585.1226   null eran_plastindo.co.id keep-alive 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/appointments gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-06T01:52:20.000000Z 2025-10-06T01:52:20.000000Z front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-995901550 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-995901550", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2037254823 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2037254823", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-630124214 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-630124214", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-469574734 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-469574734", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982975613 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982975613", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-350230610 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-350230610", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-439668058 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-439668058", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-756280333 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-756280333", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-569361 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-569361", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:53:05.595Z"} 
[2025-10-06 08:54:19] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:54:18.851Z"} 
[2025-10-06 08:54:19] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:54:18.851Z"} 
[2025-10-06 08:54:19] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:54:18.861Z"} 
[2025-10-06 08:54:19] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:54:18.862Z"} 
[2025-10-06 08:54:19] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:54:18.862Z"} 
[2025-10-06 08:55:39] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:38.349Z"} 
[2025-10-06 08:55:39] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715738 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-617442218 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-617442218", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982000631 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982000631", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-930370108 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-930370108", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-429731856 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-429731856", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-508828677 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-508828677", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-869829044 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-869829044", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1193361534 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1193361534", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1989464967 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1989464967", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1464619562 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1464619562", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 21.41 mysql  1759715737.7941 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.97 mysql  1759715737.7995 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 1.92 mysql  1759715737.8025 select * from `products` where `products`.`deleted_at` is null limit 4 2 mysql  1759715737.8057 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 2.29 mysql  1759715737.8092 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.76 mysql  1759715737.8111 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 1.83 mysql  1759715737.814 select * from `users` where `id` = ? limit 1 1.84 mysql 1 1759715737.9072 select * from `users` where `id` = ? limit 1 0.72 mysql 1 1759715737.9761 local null null C:\laragon\www\eran_plastindo null 20e6584b-0df7-4bbd-9adf-b29a9b1a754d null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715738 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-617442218 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-617442218", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982000631 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982000631", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-930370108 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-930370108", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-429731856 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-429731856", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-508828677 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-508828677", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-869829044 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-869829044", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1193361534 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1193361534", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1989464967 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1989464967", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1464619562 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1464619562", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 21.41 mysql  1759715737.7941 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.97 mysql  1759715737.7995 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 1.92 mysql  1759715737.8025 select * from `products` where `products`.`deleted_at` is null limit 4 2 mysql  1759715737.8057 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 2.29 mysql  1759715737.8092 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.76 mysql  1759715737.8111 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 1.83 mysql  1759715737.814 select * from `users` where `id` = ? limit 1 1.84 mysql 1 1759715737.9072 select * from `users` where `id` = ? limit 1 0.72 mysql 1 1759715737.9761 local null null C:\laragon\www\eran_plastindo null 20e6584b-0df7-4bbd-9adf-b29a9b1a754d null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 21.41 mysql  1759715737.7941 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.97 mysql  1759715737.7995 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 1.92 mysql  1759715737.8025 select * from `products` where `products`.`deleted_at` is null limit 4 2 mysql  1759715737.8057 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 2.29 mysql  1759715737.8092 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.76 mysql  1759715737.8111 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 1.83 mysql  1759715737.814 select * from `users` where `id` = ? limit 1 1.84 mysql 1 1759715737.9072 select * from `users` where `id` = ? limit 1 0.72 mysql 1 1759715737.9761   null eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 8.3.25 11.46.1 en false true local null front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-617442218 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-617442218", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1982000631 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1982000631", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-930370108 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-930370108", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-429731856 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-429731856", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-508828677 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-508828677", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-869829044 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-869829044", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1193361534 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1193361534", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1989464967 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1989464967", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1464619562 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-1464619562", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:38.361Z"} 
[2025-10-06 08:55:51] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:50.996Z"} 
[2025-10-06 08:55:51] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715750 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1625458642 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1625458642", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1059204962 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1059204962", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1227589293 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1227589293", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-67357746 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-67357746", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-288719286 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-288719286", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1224545364 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1224545364", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-354752432 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-354752432", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1839918202 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1839918202", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-160061906 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-160061906", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 5.23 mysql  1759715750.4231 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.05 mysql  1759715750.429 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.88 mysql  1759715750.4313 select * from `products` where `products`.`deleted_at` is null limit 4 0.78 mysql  1759715750.4332 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.8 mysql  1759715750.4352 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 1.17 mysql  1759715750.4375 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.69 mysql  1759715750.4397 select * from `users` where `id` = ? limit 1 1.03 mysql 1 1759715750.5398 local null null C:\laragon\www\eran_plastindo null 06afe2bb-c7a0-46b4-ba6f-2c0a9167ca65 null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715750 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 front.index  App\Http\Controllers\FrontController@index web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1625458642 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1625458642", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1059204962 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1059204962", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1227589293 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1227589293", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-67357746 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-67357746", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-288719286 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-288719286", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1224545364 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1224545364", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-354752432 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-354752432", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1839918202 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1839918202", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-160061906 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-160061906", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 5.23 mysql  1759715750.4231 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.05 mysql  1759715750.429 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.88 mysql  1759715750.4313 select * from `products` where `products`.`deleted_at` is null limit 4 0.78 mysql  1759715750.4332 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.8 mysql  1759715750.4352 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 1.17 mysql  1759715750.4375 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.69 mysql  1759715750.4397 select * from `users` where `id` = ? limit 1 1.03 mysql 1 1759715750.5398 local null null C:\laragon\www\eran_plastindo null 06afe2bb-c7a0-46b4-ba6f-2c0a9167ca65 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 5.23 mysql  1759715750.4231 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 1.05 mysql  1759715750.429 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.88 mysql  1759715750.4313 select * from `products` where `products`.`deleted_at` is null limit 4 0.78 mysql  1759715750.4332 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.8 mysql  1759715750.4352 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 1.17 mysql  1759715750.4375 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.69 mysql  1759715750.4397 select * from `users` where `id` = ? limit 1 1.03 mysql 1 1759715750.5398   null eran_plastindo.co.id keep-alive no-cache no-cache 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/admin/hero_sections gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi VGTY993TvbKq6pj92xlX2LUKnEfI6N49lVIlqexo 1yak28HgvhamJBEiTk0BX4eCOzKVpo57DYdZAXCi http://eran_plastindo.co.id   http://eran_plastindo.co.id/dashboard 1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-1625458642 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1625458642", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1059204962 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1059204962", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1227589293 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1227589293", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-67357746 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-67357746", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-288719286 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-288719286", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1224545364 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1224545364", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-354752432 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-354752432", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1839918202 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1839918202", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-160061906 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-160061906", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:51.004Z"} 
[2025-10-06 08:55:59] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:58.135Z"} 
[2025-10-06 08:55:59] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715757 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl Jnf3TKheKBqtJLrdS8g6rfkIC1R5rnHMSbxd022X INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl   front.index  App\Http\Controllers\FrontController@index web C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-579263968 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-579263968", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-535157928 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-535157928", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1826205355 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1826205355", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2005752571 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2005752571", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-370708662 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-370708662", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1121207376 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1121207376", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1276292756 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1276292756", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1793969003 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1793969003", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-795615390 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-795615390", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 27.41 mysql  1759715757.5337 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.79 mysql  1759715757.5386 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715757.5406 select * from `products` where `products`.`deleted_at` is null limit 4 0.65 mysql  1759715757.5423 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.67 mysql  1759715757.5439 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.81 mysql  1759715757.5457 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.83 mysql  1759715757.5477 local null null C:\laragon\www\eran_plastindo null bddc0048-3412-488c-89ae-d221a6a6788b null null Laravel Client PHP 11.46.1 8.3.25 ErrorException 1759715758 Undefined variable $hero    C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl Jnf3TKheKBqtJLrdS8g6rfkIC1R5rnHMSbxd022X INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl   front.index  App\Http\Controllers\FrontController@index web C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-579263968 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-579263968", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-535157928 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-535157928", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1826205355 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1826205355", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2005752571 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2005752571", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-370708662 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-370708662", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1121207376 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1121207376", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1276292756 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1276292756", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1793969003 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1793969003", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-795615390 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-795615390", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 27.41 mysql  1759715757.5337 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.79 mysql  1759715757.5386 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715757.5406 select * from `products` where `products`.`deleted_at` is null limit 4 0.65 mysql  1759715757.5423 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.67 mysql  1759715757.5439 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.81 mysql  1759715757.5457 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.83 mysql  1759715757.5477 local null null C:\laragon\www\eran_plastindo null bddc0048-3412-488c-89ae-d221a6a6788b null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php 100 require null </div> </div> </section> null {{-- COMPANY PROFILE VIDEO --}} <section class="bg-[#F6F7FA]"> <div class="container max-w-[1130px] mx-auto px-4 py-14 text-center"> <h2 class="text-3xl font-bold mb-6">Company Profile Video</h2> <p class="text-cp-light-grey max-w-2xl mx-auto mb-10"> Get to know PT Eran Plastindo Utama â€” our capabilities, facilities, and commitment to quality. </p> null {{-- YouTube Embed (lebih ringan) --}} <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-2xl shadow-lg"> <iframe class="absolute top-0 left-0 w-full h-full rounded-2xl" src="https://www.youtube.com/embed/{{ Str::afterLast($hero->path_video, 'youtu.be/') }}?rel=0" title="PT Eran Plastindo Utama Company Profile" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen> </iframe> </div> {{-- Jika self-host pakai video tag --}} {{-- <video controls class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg" poster="{{ asset('assets/hero/hero-factory.jpg') }}"> <source src="{{ asset('assets/videos/company-profile.mp4') }}" type="video/mp4"> Your browser does not support the video tag. </video> --}} </div>  true resources\views\front\index.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 123 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException arg0 C:\laragon\www\eran_plastindo\storage\framework\views\5a33fcda19c92fde949efb8dfd24ba8f.php string false false false false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/5a33fcda19c92fde949efb8dfd24ba8f.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/index.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) object (Illuminate\Database\Eloquent\Collection) array (size=3) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/ Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/ null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `hero_sections` where `hero_sections`.`deleted_at` is null order by `id` desc limit 1 27.41 mysql  1759715757.5337 select * from `company_statistics` where `company_statistics`.`deleted_at` is null limit 4 0.79 mysql  1759715757.5386 select * from `our_principles` where `our_principles`.`deleted_at` is null limit 8 0.69 mysql  1759715757.5406 select * from `products` where `products`.`deleted_at` is null limit 4 0.65 mysql  1759715757.5423 select * from `our_teams` where `our_teams`.`deleted_at` is null limit 7 0.67 mysql  1759715757.5439 select * from `testimonials` where `testimonials`.`deleted_at` is null limit 4 0.81 mysql  1759715757.5457 select * from `project_clients` where `project_clients`.`deleted_at` is null limit 3 0.83 mysql  1759715757.5477   null eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/dashboard gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl Jnf3TKheKBqtJLrdS8g6rfkIC1R5rnHMSbxd022X INZMPetCDEN26AVpxkPPHh6Ps8mkTK4hvBchhUvl   8.3.25 11.46.1 en false true local null front.index  App\Http\Controllers\FrontController@index web null null C:\laragon\www\eran_plastindo\resources\views\front\index.blade.php <pre class=sf-dump id=sf-dump-579263968 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1108</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-579263968", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-535157928 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1148</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-535157928", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1826205355 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1151</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1826205355", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-2005752571 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1154</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-2005752571", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-370708662 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1145</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-370708662", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1121207376 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1157</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1121207376", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1276292756 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1160</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1276292756", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-1793969003 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Database\Eloquent\Collection</span> {<a class=sf-dump-ref>#1163</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">items</span>: []
  #<span class=sf-dump-protected title="Protected property">escapeWhenCastingToString</span>: <span class=sf-dump-const>false</span>
</samp>}
</pre><script>Sfdump("sf-dump-1793969003", {"maxDepth":3,"maxStringLength":160})</script> <pre class=sf-dump id=sf-dump-795615390 data-indent-pad="  "><span class=sf-dump-note>array:3</span> [<samp data-depth=1 class=sf-dump-expanded>
  <span class=sf-dump-index>0</span> => "<span class=sf-dump-str title="9 characters">logo1.png</span>"
  <span class=sf-dump-index>1</span> => "<span class=sf-dump-str title="9 characters">logo2.png</span>"
  <span class=sf-dump-index>2</span> => "<span class=sf-dump-str title="9 characters">logo3.png</span>"
</samp>]
</pre><script>Sfdump("sf-dump-795615390", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/ ErrorException Undefined variable $hero C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local null require    {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:55:58.169Z"} 
[2025-10-06 08:57:32] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:57:31.619Z"} 
[2025-10-06 08:57:32] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:57:31.619Z"} 
[2025-10-06 08:57:32] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:57:31.627Z"} 
[2025-10-06 08:57:32] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:57:31.628Z"} 
[2025-10-06 08:57:32] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:57:31.628Z"} 
[2025-10-06 08:59:38] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:59:37.904Z"} 
[2025-10-06 08:59:38] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:59:37.904Z"} 
[2025-10-06 08:59:38] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:59:37.920Z"} 
[2025-10-06 08:59:38] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:59:37.922Z"} 
[2025-10-06 08:59:38] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T01:59:37.922Z"} 
[2025-10-06 09:01:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:01:53.842Z"} 
[2025-10-06 09:01:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:01:53.842Z"} 
[2025-10-06 09:01:54] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:01:53.855Z"} 
[2025-10-06 09:01:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:01:53.856Z"} 
[2025-10-06 09:01:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:01:53.856Z"} 
[2025-10-06 09:05:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:05:45.900Z"} 
[2025-10-06 09:05:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:05:45.901Z"} 
[2025-10-06 09:05:46] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:05:45.909Z"} 
[2025-10-06 09:05:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:05:45.910Z"} 
[2025-10-06 09:05:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:05:45.910Z"} 
[2025-10-06 09:08:12] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:12.251Z"} 
[2025-10-06 09:08:12] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:12.251Z"} 
[2025-10-06 09:08:12] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:12.264Z"} 
[2025-10-06 09:08:12] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:12.267Z"} 
[2025-10-06 09:08:12] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:12.267Z"} 
[2025-10-06 09:08:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:46.437Z"} 
[2025-10-06 09:08:46] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:46.437Z"} 
[2025-10-06 09:08:46] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:46.471Z"} 
[2025-10-06 09:08:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:46.473Z"} 
[2025-10-06 09:08:46] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:46.473Z"} 
[2025-10-06 09:08:52] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:51.695Z"} 
[2025-10-06 09:08:52] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:51.695Z"} 
[2025-10-06 09:08:52] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:51.704Z"} 
[2025-10-06 09:08:52] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:51.705Z"} 
[2025-10-06 09:08:52] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:51.705Z"} 
[2025-10-06 09:08:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:54.167Z"} 
[2025-10-06 09:08:54] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:54.167Z"} 
[2025-10-06 09:08:54] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:54.178Z"} 
[2025-10-06 09:08:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:54.179Z"} 
[2025-10-06 09:08:54] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:08:54.179Z"} 
[2025-10-06 09:09:02] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:01.879Z"} 
[2025-10-06 09:09:02] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:01.879Z"} 
[2025-10-06 09:09:02] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:01.947Z"} 
[2025-10-06 09:09:02] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:01.948Z"} 
[2025-10-06 09:09:02] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:01.948Z"} 
[2025-10-06 09:09:09] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:09.334Z"} 
[2025-10-06 09:09:09] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:09.334Z"} 
[2025-10-06 09:09:09] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:09.363Z"} 
[2025-10-06 09:09:09] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:09.364Z"} 
[2025-10-06 09:09:09] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:09.364Z"} 
[2025-10-06 09:09:37] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:36.636Z"} 
[2025-10-06 09:09:37] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:36.636Z"} 
[2025-10-06 09:09:37] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:36.649Z"} 
[2025-10-06 09:09:37] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:36.650Z"} 
[2025-10-06 09:09:37] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:09:36.650Z"} 
[2025-10-06 09:12:50] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:12:49.650Z"} 
[2025-10-06 09:12:50] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:12:49.653Z"} 
[2025-10-06 09:12:50] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:12:49.676Z"} 
[2025-10-06 09:12:50] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:12:49.676Z"} 
[2025-10-06 09:12:50] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:12:49.677Z"} 
[2025-10-06 09:13:10] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:13:09.679Z"} 
[2025-10-06 09:13:10] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:13:09.679Z"} 
[2025-10-06 09:13:10] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:13:09.697Z"} 
[2025-10-06 09:13:10] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:13:09.698Z"} 
[2025-10-06 09:13:10] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at https://code.jquery.com/jquery-3.7.1.min.js:2:27330 {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:13:09.698Z"} 
[2025-10-06 09:20:39] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:39.191Z"} 
[2025-10-06 09:20:40] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:39.191Z"} 
[2025-10-06 09:20:40] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:39.203Z"} 
[2025-10-06 09:20:40] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:39.203Z"} 
[2025-10-06 09:20:40] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:39.203Z"} 
[2025-10-06 09:20:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:50.864Z"} 
[2025-10-06 09:20:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:50.864Z"} 
[2025-10-06 09:20:51] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:50.873Z"} 
[2025-10-06 09:20:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:50.875Z"} 
[2025-10-06 09:20:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:20:50.875Z"} 
[2025-10-06 09:22:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:22:47.716Z"} 
[2025-10-06 09:22:48] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:22:47.717Z"} 
[2025-10-06 09:22:48] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:22:47.727Z"} 
[2025-10-06 09:22:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:22:47.727Z"} 
[2025-10-06 09:22:48] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:22:47.727Z"} 
[2025-10-06 09:23:59] local.INFO: %cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools font-weight:bold {"url":"http://eran_plastindo.co.id/news/details3","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:23:58.752Z"} 
[2025-10-06 09:23:59] local.DEBUG: Laravel Client PHP 11.46.1 8.3.25 ParseError 1759717438 syntax error, unexpected identifier "assets", expecting ")"    C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php 194 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-4">Recent News</div> <ul class="space-y-5 text-sm"> <li> <a href="{{ route('front.news_details1') }}" class="group block"> <img src="{{ asset('assets/news/news1.jpg') }}" alt="Education & collaboration for SMEs" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Automotive SMEs Strengthen Competitiveness Through Education & Collaboration </div> <div class="text-xs text-slate-500">ðŸ‘¤ Khaerul Izan â€¢ Nov 22, 2023</div> </a> </li> <li> <a href="{{ route('front.news_details2) }}" class="group block"> <img src="{{ asset('assets/news/news2.jpg') }}" alt="Supply Chain Financing collaboration" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Strengthening the Supply Chain Through Supply Chain Financing </div> <div class="text-xs text-slate-500">ðŸ‘¤ Astra Ventura â€¢ Apr 09, 2025</div> </a> </li> </ul> </div> null {{-- Tags --}} <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-3">Tags</div> <div class="flex flex-wrap gap-2">  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/news_details3.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/news/details3 null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/news/details3 gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab s9KH7A4G79FmA5inC0QAqejOi6di6LFo5BTUrzkM TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab   http://eran_plastindo.co.id/news/details3 1 front.news_details3  App\Http\Controllers\FrontController@news_details3 web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php <pre class=sf-dump id=sf-dump-1432943416 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1116</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1432943416", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `users` where `id` = ? limit 1 23.77 mysql 1 1759717438.2361 local null null C:\laragon\www\eran_plastindo null 827eaa88-dfad-4818-b75a-a67c51804fb1 null null Laravel Client PHP 11.46.1 8.3.25 ParseError 1759717438 syntax error, unexpected identifier "assets", expecting ")"    C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php 194 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-4">Recent News</div> <ul class="space-y-5 text-sm"> <li> <a href="{{ route('front.news_details1') }}" class="group block"> <img src="{{ asset('assets/news/news1.jpg') }}" alt="Education & collaboration for SMEs" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Automotive SMEs Strengthen Competitiveness Through Education & Collaboration </div> <div class="text-xs text-slate-500">ðŸ‘¤ Khaerul Izan â€¢ Nov 22, 2023</div> </a> </li> <li> <a href="{{ route('front.news_details2) }}" class="group block"> <img src="{{ asset('assets/news/news2.jpg') }}" alt="Supply Chain Financing collaboration" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Strengthening the Supply Chain Through Supply Chain Financing </div> <div class="text-xs text-slate-500">ðŸ‘¤ Astra Ventura â€¢ Apr 09, 2025</div> </a> </li> </ul> </div> null {{-- Tags --}} <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-3">Tags</div> <div class="flex flex-wrap gap-2">  true C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/news_details3.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true http://eran_plastindo.co.id/news/details3 null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/news/details3 gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab s9KH7A4G79FmA5inC0QAqejOi6di6LFo5BTUrzkM TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab   http://eran_plastindo.co.id/news/details3 1 front.news_details3  App\Http\Controllers\FrontController@news_details3 web 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php <pre class=sf-dump id=sf-dump-1432943416 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1116</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1432943416", {"maxDepth":3,"maxStringLength":160})</script> 8.3.25 11.46.1 en false true local   select * from `users` where `id` = ? limit 1 23.77 mysql 1 1759717438.2361 local null null C:\laragon\www\eran_plastindo null 827eaa88-dfad-4818-b75a-a67c51804fb1 null null phpstorm auto false C:\laragon\www\eran_plastindo null true false \ Clipboard %path:%line true Sublime subl://open?url=file://%path&line=%line TextMate txmt://open?url=file://%path&line=%line Emacs emacs://open?url=file://%path&line=%line MacVim mvim://open/?url=file://%path&line=%line PhpStorm phpstorm://open?file=%path&line=%line PHPStorm Remote javascript:r = new XMLHttpRequest;r.open("get", "http://localhost:63342/api/file/%path:%line");r.send() Idea idea://open?file=%path&line=%line VS Code vscode://file/%path:%line VS Code Insiders vscode-insiders://file/%path:%line VS Code Remote vscode://vscode-remote/%path:%line VS Code Insiders Remote vscode-insiders://vscode-remote/%path:%line VS Codium vscodium://file/%path:%line Cursor cursor://file/%path:%line Atom atom://core/open/file?filename=%path&line=%line Nova nova://open?path=%path&line=%line NetBeans netbeans://open/?f=%path:%line Xdebug xdebug://%path@%line https://flareapp.io/api/public-reports  /_ignition/update-config C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php 194 Illuminate\Filesystem\{closure} Illuminate\Filesystem\Filesystem <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-4">Recent News</div> <ul class="space-y-5 text-sm"> <li> <a href="{{ route('front.news_details1') }}" class="group block"> <img src="{{ asset('assets/news/news1.jpg') }}" alt="Education & collaboration for SMEs" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Automotive SMEs Strengthen Competitiveness Through Education & Collaboration </div> <div class="text-xs text-slate-500">ðŸ‘¤ Khaerul Izan â€¢ Nov 22, 2023</div> </a> </li> <li> <a href="{{ route('front.news_details2) }}" class="group block"> <img src="{{ asset('assets/news/news2.jpg') }}" alt="Supply Chain Financing collaboration" class="w-full rounded-lg mb-2 aspect-[4/3] object-cover border border-[#E8EAF2]"> <div class="font-medium group-hover:text-cp-dark-blue transition"> Strengthening the Supply Chain Through Supply Chain Financing </div> <div class="text-xs text-slate-500">ðŸ‘¤ Astra Ventura â€¢ Apr 09, 2025</div> </a> </li> </ul> </div> null {{-- Tags --}} <div class="border rounded-xl p-6 bg-white"> <div class="font-semibold mb-3">Tags</div> <div class="flex flex-wrap gap-2">  true resources\views\front\News_details3.blade.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php 124 getRequire Illuminate\Filesystem\Filesystem * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */ public function getRequire($path, array $data = []) { if ($this->isFile($path)) { $__path = $path; $__data = $data; null return (static function () use ($__path, $__data) { extract($__data, EXTR_SKIP); null return require $__path; })(); } null throw new FileNotFoundException("File does not exist at path {$path}."); } null /** * Require the given file once. * * @param  string  $path * @param  array  $data * @return mixed * * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException */  false vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php 58 evaluatePath Illuminate\View\Engines\PhpEngine * * @param  string  $path * @param  array  $data * @return string */ protected function evaluatePath($path, $data) { $obLevel = ob_get_level(); null ob_start(); null // We'll evaluate the contents of the view inside a try/catch block so we can // flush out any stray output that might get out before an error occurs or // an exception is thrown. This prevents any partial views from leaking. try { $this->files->getRequire($path, $data); } catch (Throwable $e) { $this->handleViewException($e, $obLevel); } null return ltrim(ob_get_clean()); } null /** * Handle a view exception. * * @param  \Throwable  $e * @param  int  $obLevel * @return void * path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\PhpEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php 75 get Illuminate\View\Engines\CompilerEngine { $this->lastCompiled[] = $path; null // If this given view has expired, which means it has simply been edited since // it was last compiled, we will re-compile the views so we can evaluate a // fresh copy of the view. We'll pass the compiler the path of the view. if (! isset($this->compiledOrNotExpired[$path]) && $this->compiler->isExpired($path)) { $this->compiler->compile($path); } null // Once we have the path to the compiled file, we will evaluate the paths with // typical PHP just like any other templates. We also keep a stack of views // which have been rendered for right exception messages to be generated. null try { $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } catch (ViewException $e) { if (! Str::of($e->getMessage())->contains(['No such file or directory', 'File does not exist at path'])) { throw $e; } null if (! isset($this->compiledOrNotExpired[$path])) { throw $e; } null $this->compiler->compile($path); null $results = $this->evaluatePath($this->compiler->getCompiledPath($path), $data); } null path C:\laragon\www\eran_plastindo\storage\framework\views/1ead469bc3e39082c40b8a97b5027cc5.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false vendor\laravel\framework\src\Illuminate\View\Engines\CompilerEngine.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 209 getContents Illuminate\View\View // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */ protected function getContents() { return $this->engine->get($this->path, $this->gatherData()); } null /** * Get the data bound to the view instance. * * @return array */ public function gatherData() { $data = array_merge($this->factory->getShared(), $this->data); null foreach ($data as $key => $value) { if ($value instanceof Renderable) { $data[$key] = $value->render(); path C:\laragon\www\eran_plastindo\resources\views/front/news_details3.blade.php string false false false data object (Illuminate\View\Factory) object (Illuminate\Foundation\Application) object (Illuminate\Support\ViewErrorBag) array false false false false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 192 renderContents Illuminate\View\View null /** * Get the contents of the view instance. * * @return string */ protected function renderContents() { // We will keep track of the number of views being rendered so we can flush // the section after the complete rendering operation is done. This will // clear out the sections for any separate views that may be rendered. $this->factory->incrementRender(); null $this->factory->callComposer($this); null $contents = $this->getContents(); null // Once we've finished rendering the view, we'll decrement the render count // so that each section gets flushed out next time a view is created and // no old sections are staying around in the memory of an environment. $this->factory->decrementRender(); null return $contents; } null /** * Get the evaluated contents of the view. * * @return string */  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\View.php 161 render Illuminate\View\View { return (new Collection($this->render(fn () => $this->factory->getFragments())))->implode(''); } null /** * Get the string contents of the view. * * @param  callable|null  $callback * @return string * * @throws \Throwable */ public function render(?callable $callback = null) { try { $contents = $this->renderContents(); null $response = isset($callback) ? $callback($this, $contents) : null; null // Once we have the contents of the view, we will flush the sections if we are // done rendering all views so that there is nothing left hanging over when // another view gets rendered in the future by the application developer. $this->factory->flushStateIfDoneRendering(); null return ! is_null($response) ? $response : $contents; } catch (Throwable $e) { $this->factory->flushState(); null throw $e; }  false vendor\laravel\framework\src\Illuminate\View\View.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 79 setContent Illuminate\Http\Response // from routes that will be automatically transformed to their JSON form. if ($this->shouldBeJson($content)) { $this->header('Content-Type', 'application/json'); null $content = $this->morphToJson($content); null if ($content === false) { throw new InvalidArgumentException(json_last_error_msg()); } } null // If this content implements the "Renderable" interface then we will call the // render method on the object so we will avoid any "__toString" exceptions // that might be thrown and have their errors obscured by PHP's handling. elseif ($content instanceof Renderable) { $content = $content->render(); } null parent::setContent($content); null return $this; } null /** * Determine if the given content should be turned into JSON. * * @param  mixed  $content * @return bool */ protected function shouldBeJson($content) callback null null false false false false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Response.php 35 __construct Illuminate\Http\Response null /** * Create a new HTTP response. * * @param  mixed  $content * @param  int  $status * @param  array  $headers * @return void * * @throws \InvalidArgumentException */ public function __construct($content = '', $status = 200, array $headers = []) { $this->headers = new ResponseHeaderBag($headers); null $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); } null /** * Get the response content. */ #[\Override] public function getContent(): string|false { return transform(parent::getContent(), fn ($content) => $content, ''); } null /** null false vendor\laravel\framework\src\Illuminate\Http\Response.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 920 toResponse Illuminate\Routing\Router if ($response instanceof PsrResponseInterface) { $response = (new HttpFoundationFactory)->createResponse($response); } elseif ($response instanceof Model && $response->wasRecentlyCreated) { $response = new JsonResponse($response, 201); } elseif ($response instanceof Stringable) { $response = new Response($response->__toString(), 200, ['Content-Type' => 'text/html']); } elseif (! $response instanceof SymfonyResponse && ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || $response instanceof stdClass || is_array($response))) { $response = new JsonResponse($response); } elseif (! $response instanceof SymfonyResponse) { $response = new Response($response, 200, ['Content-Type' => 'text/html']); } null if ($response->getStatusCode() === Response::HTTP_NOT_MODIFIED) { $response->setNotModified(); } null return $response->prepare($request); } null /** * Substitute the route bindings onto the route. * * @param  \Illuminate\Routing\Route  $route * @return \Illuminate\Routing\Route null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 887 prepareResponse Illuminate\Routing\Router { return (new SortedMiddleware($this->middlewarePriority, $middlewares))->all(); } null /** * Create a response instance from the given value. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public function prepareResponse($request, $response) { $this->events->dispatch(new PreparingResponse($request, $response)); null return tap(static::toResponse($request, $response), function ($response) use ($request) { $this->events->dispatch(new ResponsePrepared($request, $response)); }); } null /** * Static version of prepareResponse. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @param  mixed  $response * @return \Symfony\Component\HttpFoundation\Response */ public static function toResponse($request, $response) { if ($response instanceof Responsable) { null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 Illuminate\Routing\{closure} Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } null false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\boost\src\Middleware\InjectBoost.php 22 handle Laravel\Boost\Middleware\InjectBoost use Closure; use Illuminate\Http\JsonResponse; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\View\View; use Laravel\Boost\Services\BrowserLogger; use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpFoundation\StreamedResponse; null class InjectBoost { public function handle(Request $request, Closure $next): Response { /** @var Response $response */ $response = $next($request); null if ($this->shouldInject($response)) { $originalView = $response->original ?? null; $injectedContent = $this->injectScript($response->getContent()); $response->setContent($injectedContent); null if ($originalView instanceof View && property_exists($response, 'original')) { $response->original = $originalView; } } null return $response; } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\boost\src\Middleware\InjectBoost.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php 51 handle Illuminate\Routing\Middleware\SubstituteBindings { $this->router = $router; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $route = $request->route(); null try { $this->router->substituteBindings($route); $this->router->substituteImplicitBindings($route); } catch (ModelNotFoundException $exception) { if ($route->getMissing()) { return $route->getMissing()($request, $exception); } null throw $exception; } null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php 88 handle Illuminate\Foundation\Http\Middleware\VerifyCsrfToken * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Session\TokenMismatchException */ public function handle($request, Closure $next) { if ( $this->isReading($request) || $this->runningUnitTests() || $this->inExceptArray($request) || $this->tokensMatch($request) ) { return tap($next($request), function ($response) use ($request) { if ($this->shouldAddXsrfTokenCookie()) { $this->addCookieToResponse($request, $response); } }); } null throw new TokenMismatchException('CSRF token mismatch.'); } null /** * Determine if the HTTP request uses a â€˜readâ€™ verb. * * @param  \Illuminate\Http\Request  $request * @return bool arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\VerifyCsrfToken.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php 49 handle Illuminate\View\Middleware\ShareErrorsFromSession */ public function __construct(ViewFactory $view) { $this->view = $view; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { // If the current session has an "errors" variable bound to it, we will share // its value with all view instances so the views can easily access errors // without having to bind. An empty bag is set when there aren't errors. $this->view->share( 'errors', $request->session()->get('errors') ?: new ViewErrorBag ); null // Putting the errors in the view for every view allows the developer to just // assume that some errors are always available, which is convenient since // they don't have to continually run checks for the presence of errors. null return $next($request); } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\View\Middleware\ShareErrorsFromSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 121 handleStatefulRequest Illuminate\Session\Middleware\StartSession * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleStatefulRequest(Request $request, $session, Closure $next) { // If a session driver has been configured, we will need to start the session here // so that the data is ready for an application. Note that the Laravel sessions // do not make use of PHP "native" sessions in any way since they are crappy. $request->setLaravelSession( $this->startSession($request, $session) ); null $this->collectGarbage($session); null $response = $next($request); null $this->storeCurrentUrl($request, $session); null $this->addCookieToResponse($response, $session); null // Again, if the session has been configured we will need to close out the session // so that the attributes may be persisted to some storage medium. We will also // add the session identifier cookie to the application response headers now. $this->saveSession($request); null return $response; } null /** arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php 64 handle Illuminate\Session\Middleware\StartSession * @return mixed */ public function handle($request, Closure $next) { if (! $this->sessionConfigured()) { return $next($request); } null $session = $this->getSession($request); null if ($this->manager->shouldBlock() || ($request->route() instanceof Route && $request->route()->locksFor())) { return $this->handleRequestWhileBlocking($request, $session, $next); } null return $this->handleStatefulRequest($request, $session, $next); } null /** * Handle the given request within session state. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Contracts\Session\Session  $session * @param  \Closure  $next * @return mixed */ protected function handleRequestWhileBlocking(Request $request, $session, Closure $next) { if (! $request->route() instanceof Route) { return; request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false session object Illuminate\Session\Store false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Session\Middleware\StartSession.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php 37 handle Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse /** * Create a new CookieQueue instance. * * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies * @return void */ public function __construct(CookieJar $cookies) { $this->cookies = $cookies; } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $response = $next($request); null foreach ($this->cookies->getQueuedCookies() as $cookie) { $response->headers->setCookie($cookie); } null return $response; } } null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php 75 handle Illuminate\Cookie\Middleware\EncryptCookies */ public function disableFor($name) { $this->except = array_merge($this->except, (array) $name); } null /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle($request, Closure $next) { return $this->encrypt($next($this->decrypt($request))); } null /** * Decrypt the cookies on the request. * * @param  \Symfony\Component\HttpFoundation\Request  $request * @return \Symfony\Component\HttpFoundation\Request */ protected function decrypt(Request $request) { foreach ($request->cookies as $key => $cookie) { if ($this->isDisabled($key)) { continue; } arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Cookie\Middleware\EncryptCookies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 807 runRouteWithinStack Illuminate\Routing\Router * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; null $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route); null return (new Pipeline($this->container)) ->send($request) ->through($middleware) ->then(fn ($request) => $this->prepareResponse( $request, $route->run() )); } null /** * Gather the middleware for the given route with resolved class names. * * @param  \Illuminate\Routing\Route  $route * @return array */ public function gatherRouteMiddleware(Route $route) { return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware()); } destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php:807-809 Closure false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 786 runRoute Illuminate\Routing\Router null /** * Return the response for the given route. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Routing\Route  $route * @return \Symfony\Component\HttpFoundation\Response */ protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(fn () => $route); null $this->events->dispatch(new RouteMatched($route, $request)); null return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); } null /** * Run the given route within a Stack "onion" instance. * * @param  \Illuminate\Routing\Route  $route * @param  \Illuminate\Http\Request  $request * @return mixed */ protected function runRouteWithinStack(Route $route, Request $request) { $shouldSkipMiddleware = $this->container->bound('middleware.disable') && $this->container->make('middleware.disable') === true; route object Illuminate\Routing\Route false false false request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 750 dispatchToRoute Illuminate\Routing\Router public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** * Find the route matching a given request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Routing\Route */ protected function findRoute($request) { $this->events->dispatch(new Routing($request)); null $this->current = $route = $this->routes->match($request); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false route object Illuminate\Routing\Route false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Routing\Router.php 739 dispatch Illuminate\Routing\Router $route = tap($this->routes->getByName($name))->bind($this->currentRequest); null return $this->runRoute($this->currentRequest, $route); } null /** * Dispatch the request to the application. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatch(Request $request) { $this->currentRequest = $request; null return $this->dispatchToRoute($request); } null /** * Dispatch the request to a route and return the response. * * @param  \Illuminate\Http\Request  $request * @return \Symfony\Component\HttpFoundation\Response */ public function dispatchToRoute(Request $request) { return $this->runRoute($request, $this->findRoute($request)); } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Routing\Router.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 201 Illuminate\Foundation\Http\{closure} Illuminate\Foundation\Http\Kernel if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null /** * Get the route dispatcher callback. * * @return \Closure */ protected function dispatchToRouter() { return function ($request) { $this->app->instance('request', $request); null return $this->router->dispatch($request); }; } null /** * Call the terminate method on any terminable middleware. * * @param  \Illuminate\Http\Request  $request * @param  \Illuminate\Http\Response  $response * @return void */ public function terminate($request, $response) { $this->app['events']->dispatch(new Terminating); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 170 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline $this->finally = $callback; null return $this; } null /** * Get the final piece of the Closure onion. * * @param  \Closure  $destination * @return \Closure */ protected function prepareDestination(Closure $destination) { return function ($passable) use ($destination) { try { return $destination($passable); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; } null /** * Get a Closure that represents a slice of the application onion. * * @return \Closure */ protected function carry() { return function ($stack, $pipe) { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php 31 handle Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { return $value === '' ? null : $value; } null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:168-174 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php 21 handle Illuminate\Foundation\Http\Middleware\TransformsRequest use Symfony\Component\HttpFoundation\ParameterBag; null class TransformsRequest { /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { $this->clean($request); null return $next($request); } null /** * Clean the request's data. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function clean($request) { $this->cleanParameterBag($request->query); null if ($request->isJson()) { $this->cleanParameterBag($request->json()); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php 51 handle Illuminate\Foundation\Http\Middleware\TrimStrings /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed */ public function handle($request, Closure $next) { foreach (static::$skipCallbacks as $callback) { if ($callback($request)) { return $next($request); } } null return parent::handle($request, $next); } null /** * Transform the given value. * * @param  string  $key * @param  mixed  $value * @return mixed */ protected function transform($key, $value) { $except = array_merge($this->except, static::$neverTrim); null if ($this->shouldSkip($key, $except) || ! is_string($value)) { request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php 27 handle Illuminate\Http\Middleware\ValidatePostSize * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Illuminate\Http\Exceptions\PostTooLargeException */ public function handle($request, Closure $next) { $max = $this->getPostMaxSize(); null if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) { throw new PostTooLargeException('The POST data is too large.'); } null return $next($request); } null /** * Determine the server 'post_max_size' as bytes. * * @return int */ protected function getPostMaxSize() { if (is_numeric($postMaxSize = ini_get('post_max_size'))) { return (int) $postMaxSize; } null $metric = strtoupper(substr($postMaxSize, -1)); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\ValidatePostSize.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php 110 handle Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance return response( $data['template'], $data['status'] ?? 503, $this->getHeaders($data) ); } null throw new HttpException( $data['status'] ?? 503, 'Service Unavailable', null, $this->getHeaders($data) ); } null return $next($request); } null /** * Determine if the incoming request has a maintenance mode bypass cookie. * * @param  \Illuminate\Http\Request  $request * @param  array  $data * @return bool */ protected function hasValidBypassCookie($request, array $data) { return isset($data['secret']) && $request->cookie('laravel_maintenance') && MaintenanceModeBypassCookie::isValid( arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php 49 handle Illuminate\Http\Middleware\HandleCors { $this->container = $container; $this->cors = $cors; } null /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Illuminate\Http\Response */ public function handle($request, Closure $next) { if (! $this->hasMatchingPath($request)) { return $next($request); } null $this->cors->setOptions($this->container['config']->get('cors', [])); null if ($this->cors->isPreflightRequest($request)) { $response = $this->cors->handlePreflightRequest($request); null $this->cors->varyHeader($response, 'Access-Control-Request-Method'); null return $response; } null $response = $next($request); null arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\HandleCors.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php 58 handle Illuminate\Http\Middleware\TrustProxies /** * Handle an incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return mixed * * @throws \Symfony\Component\HttpKernel\Exception\HttpException */ public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); null $this->setTrustedProxyIpAddresses($request); null return $next($request); } null /** * Sets the trusted proxies on the request. * * @param  \Illuminate\Http\Request  $request * @return void */ protected function setTrustedProxyIpAddresses(Request $request) { $trustedIps = $this->proxies() ?: config('trustedproxy.proxies'); null if (is_null($trustedIps) && (laravel_cloud() || arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Http\Middleware\TrustProxies.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php 22 handle Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks use Illuminate\Http\Request; use Illuminate\Support\Defer\DeferredCallbackCollection; use Symfony\Component\HttpFoundation\Response; null class InvokeDeferredCallbacks { /** * Handle the incoming request. * * @param  \Illuminate\Http\Request  $request * @param  \Closure  $next * @return \Symfony\Component\HttpFoundation\Response */ public function handle(Request $request, Closure $next) { return $next($request); } null /** * Invoke the deferred callbacks. * * @param  \Illuminate\Http\Request  $request * @param  \Symfony\Component\HttpFoundation\Response  $response * @return void */ public function terminate(Request $request, Response $response) { Container::getInstance() ->make(DeferredCallbackCollection::class) ->invokeWhen(fn ($callback) => $response->getStatusCode() < 400 || $callback->always); arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 209 Illuminate\Pipeline\{closure} Illuminate\Pipeline\Pipeline null // If the pipe is a string we will parse the string and resolve the class out // of the dependency injection container. We can then build a callable and // execute the pipe function giving in the parameters that are required. $pipe = $this->getContainer()->make($name); null $parameters = array_merge([$passable, $stack], $parameters); } else { // If the pipe is already an object we'll just make a callable and pass it to // the pipe as-is. There is no need to do any extra parsing and formatting // since the object we're given was already a fully instantiated object. $parameters = [$passable, $stack]; } null $carry = method_exists($pipe, $this->method) ? $pipe->{$this->method}(...$parameters) : $pipe(...$parameters); null return $this->handleCarry($carry); } catch (Throwable $e) { return $this->handleException($passable, $e); } }; }; } null /** * Parse full pipe string to get name and parameters. * * @param  string  $pipe request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false next C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php:185-216 Closure false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php 127 then Illuminate\Pipeline\Pipeline } null /** * Run the pipeline with a final destination callback. * * @param  \Closure  $destination * @return mixed */ public function then(Closure $destination) { $pipeline = array_reduce( array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination) ); null try { return $pipeline($this->passable); } finally { if ($this->finally) { ($this->finally)($this->passable); } } } null /** * Run the pipeline and return the result. * * @return mixed */ public function thenReturn() { arg0 GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 176 sendRequestThroughRouter Illuminate\Foundation\Http\Kernel * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ protected function sendRequestThroughRouter($request) { $this->app->instance('request', $request); null Facade::clearResolvedInstance('request'); null $this->bootstrap(); null return (new Pipeline($this->app)) ->send($request) ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware) ->then($this->dispatchToRouter()); } null /** * Bootstrap the application for HTTP requests. * * @return void */ public function bootstrap() { if (! $this->app->hasBeenBootstrapped()) { $this->app->bootstrapWith($this->bootstrappers()); } } null destination C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php:198-202 Closure false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php 145 handle Illuminate\Foundation\Http\Kernel } null /** * Handle an incoming HTTP request. * * @param  \Illuminate\Http\Request  $request * @return \Illuminate\Http\Response */ public function handle($request) { $this->requestStartedAt = Carbon::now(); null try { $request->enableHttpMethodParameterOverride(); null $response = $this->sendRequestThroughRouter($request); } catch (Throwable $e) { $this->reportException($e); null $response = $this->renderException($request, $e); } null $this->app['events']->dispatch( new RequestHandled($request, $response) ); null return $response; } null /** request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php C:\laragon\www\eran_plastindo\vendor\laravel\framework\src\Illuminate\Foundation\Application.php 1220 handleRequest Illuminate\Foundation\Application public function handle(SymfonyRequest $request, int $type = self::MAIN_REQUEST, bool $catch = true): SymfonyResponse { return $this[HttpKernelContract::class]->handle(Request::createFromBase($request)); } null /** * Handle the incoming HTTP request and send the response to the browser. * * @param  \Illuminate\Http\Request  $request * @return void */ public function handleRequest(Request $request) { $kernel = $this->make(HttpKernelContract::class); null $response = $kernel->handle($request)->send(); null $kernel->terminate($request, $response); } null /** * Handle the incoming Artisan command. * * @param  \Symfony\Component\Console\Input\InputInterface  $input * @return int */ public function handleCommand(InputInterface $input) { $kernel = $this->make(ConsoleKernelContract::class); null request GET http://eran_plastindo.co.id/news/details3 Illuminate\Http\Request false false false false vendor\laravel\framework\src\Illuminate\Foundation\Application.php C:\laragon\www\eran_plastindo\public\index.php 17 [top] null <?php null use Illuminate\Http\Request; null define('LARAVEL_START', microtime(true)); null // Determine if the application is in maintenance mode... if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) { require $maintenance; } null // Register the Composer autoloader... require __DIR__.'/../vendor/autoload.php'; null // Bootstrap Laravel and handle the request... (require_once __DIR__.'/../bootstrap/app.php') ->handleRequest(Request::capture()); null  true public\index.php http://eran_plastindo.co.id/news/details3 null GET Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36    select * from `users` where `id` = ? limit 1 23.77 mysql 1 1759717438.2361   null eran_plastindo.co.id keep-alive max-age=0 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 http://eran_plastindo.co.id/news/details3 gzip, deflate en-US,en;q=0.9,id;q=0.8 <CENSORED> TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab s9KH7A4G79FmA5inC0QAqejOi6di6LFo5BTUrzkM TH5BipNfU8x47QywhfMj3g4QRUpvzX7TtzAspuab   http://eran_plastindo.co.id/news/details3 1 8.3.25 11.46.1 en false true local 1 EranPlastindoComp super@admin.com null 2025-10-06T01:55:45.000000Z 2025-10-06T01:55:45.000000Z front.news_details3  App\Http\Controllers\FrontController@news_details3 web null null C:\laragon\www\eran_plastindo\resources\views\front\News_details3.blade.php <pre class=sf-dump id=sf-dump-1432943416 data-indent-pad="  "><span class=sf-dump-note>Illuminate\Support\ViewErrorBag</span> {<a class=sf-dump-ref>#1116</a><samp data-depth=1 class=sf-dump-expanded>
  #<span class=sf-dump-protected title="Protected property">bags</span>: []
</samp>}
</pre><script>Sfdump("sf-dump-1432943416", {"maxDepth":3,"maxStringLength":160})</script> null null null  web http://eran_plastindo.co.id/news/details3 ParseError syntax error, unexpected identifier "assets", expecting ")" C:\laragon\www\eran_plastindo null 8.3.25 11.46.1 Flare local Illuminate\Filesystem\Filesystem Illuminate\Filesystem\{closure}    {"url":"http://eran_plastindo.co.id/news/details3","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:23:58.778Z"} 
[2025-10-06 09:24:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:24:50.643Z"} 
[2025-10-06 09:24:51] local.ERROR: Script error. null 0 0 null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:24:50.643Z"} 
[2025-10-06 09:24:51] local.WARNING: jQuery.Deferred exception: $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) null {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:24:50.649Z"} 
[2025-10-06 09:24:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:24:50.650Z"} 
[2025-10-06 09:24:51] local.ERROR: Uncaught TypeError: $(...).flickity is not a function https://code.jquery.com/jquery-3.7.1.min.js 2 28760 TypeError $(...).flickity is not a function TypeError: $(...).flickity is not a function
    at HTMLDocument.<anonymous> (http://eran_plastindo.co.id/js/carousel.js:2:25)
    at e (https://code.jquery.com/jquery-3.7.1.min.js:2:27028)
    at t (https://code.jquery.com/jquery-3.7.1.min.js:2:27330) {"url":"http://eran_plastindo.co.id/","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","timestamp":"2025-10-06T02:24:50.650Z"} 
